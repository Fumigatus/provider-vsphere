/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	"github.com/pkg/errors"

	"github.com/upbound/upjet/pkg/resource"
	"github.com/upbound/upjet/pkg/resource/json"
)

// GetTerraformResourceType returns Terraform resource type for this VSphereComputeCluster
func (mg *VSphereComputeCluster) GetTerraformResourceType() string {
	return "vsphere_compute_cluster"
}

// GetConnectionDetailsMapping for this VSphereComputeCluster
func (tr *VSphereComputeCluster) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this VSphereComputeCluster
func (tr *VSphereComputeCluster) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this VSphereComputeCluster
func (tr *VSphereComputeCluster) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this VSphereComputeCluster
func (tr *VSphereComputeCluster) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this VSphereComputeCluster
func (tr *VSphereComputeCluster) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this VSphereComputeCluster
func (tr *VSphereComputeCluster) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this VSphereComputeCluster using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *VSphereComputeCluster) LateInitialize(attrs []byte) (bool, error) {
	params := &VSphereComputeClusterParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *VSphereComputeCluster) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this VSphereComputeClusterHostGroup
func (mg *VSphereComputeClusterHostGroup) GetTerraformResourceType() string {
	return "vsphere_compute_cluster_host_group"
}

// GetConnectionDetailsMapping for this VSphereComputeClusterHostGroup
func (tr *VSphereComputeClusterHostGroup) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this VSphereComputeClusterHostGroup
func (tr *VSphereComputeClusterHostGroup) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this VSphereComputeClusterHostGroup
func (tr *VSphereComputeClusterHostGroup) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this VSphereComputeClusterHostGroup
func (tr *VSphereComputeClusterHostGroup) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this VSphereComputeClusterHostGroup
func (tr *VSphereComputeClusterHostGroup) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this VSphereComputeClusterHostGroup
func (tr *VSphereComputeClusterHostGroup) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this VSphereComputeClusterHostGroup using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *VSphereComputeClusterHostGroup) LateInitialize(attrs []byte) (bool, error) {
	params := &VSphereComputeClusterHostGroupParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *VSphereComputeClusterHostGroup) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this VSphereComputeClusterVmAffinityRule
func (mg *VSphereComputeClusterVmAffinityRule) GetTerraformResourceType() string {
	return "vsphere_compute_cluster_vm_affinity_rule"
}

// GetConnectionDetailsMapping for this VSphereComputeClusterVmAffinityRule
func (tr *VSphereComputeClusterVmAffinityRule) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this VSphereComputeClusterVmAffinityRule
func (tr *VSphereComputeClusterVmAffinityRule) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this VSphereComputeClusterVmAffinityRule
func (tr *VSphereComputeClusterVmAffinityRule) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this VSphereComputeClusterVmAffinityRule
func (tr *VSphereComputeClusterVmAffinityRule) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this VSphereComputeClusterVmAffinityRule
func (tr *VSphereComputeClusterVmAffinityRule) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this VSphereComputeClusterVmAffinityRule
func (tr *VSphereComputeClusterVmAffinityRule) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this VSphereComputeClusterVmAffinityRule using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *VSphereComputeClusterVmAffinityRule) LateInitialize(attrs []byte) (bool, error) {
	params := &VSphereComputeClusterVmAffinityRuleParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *VSphereComputeClusterVmAffinityRule) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this VSphereComputeClusterVmAntiAffinityRule
func (mg *VSphereComputeClusterVmAntiAffinityRule) GetTerraformResourceType() string {
	return "vsphere_compute_cluster_vm_anti_affinity_rule"
}

// GetConnectionDetailsMapping for this VSphereComputeClusterVmAntiAffinityRule
func (tr *VSphereComputeClusterVmAntiAffinityRule) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this VSphereComputeClusterVmAntiAffinityRule
func (tr *VSphereComputeClusterVmAntiAffinityRule) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this VSphereComputeClusterVmAntiAffinityRule
func (tr *VSphereComputeClusterVmAntiAffinityRule) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this VSphereComputeClusterVmAntiAffinityRule
func (tr *VSphereComputeClusterVmAntiAffinityRule) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this VSphereComputeClusterVmAntiAffinityRule
func (tr *VSphereComputeClusterVmAntiAffinityRule) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this VSphereComputeClusterVmAntiAffinityRule
func (tr *VSphereComputeClusterVmAntiAffinityRule) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this VSphereComputeClusterVmAntiAffinityRule using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *VSphereComputeClusterVmAntiAffinityRule) LateInitialize(attrs []byte) (bool, error) {
	params := &VSphereComputeClusterVmAntiAffinityRuleParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *VSphereComputeClusterVmAntiAffinityRule) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this VSphereComputeClusterVmDependencyRule
func (mg *VSphereComputeClusterVmDependencyRule) GetTerraformResourceType() string {
	return "vsphere_compute_cluster_vm_dependency_rule"
}

// GetConnectionDetailsMapping for this VSphereComputeClusterVmDependencyRule
func (tr *VSphereComputeClusterVmDependencyRule) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this VSphereComputeClusterVmDependencyRule
func (tr *VSphereComputeClusterVmDependencyRule) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this VSphereComputeClusterVmDependencyRule
func (tr *VSphereComputeClusterVmDependencyRule) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this VSphereComputeClusterVmDependencyRule
func (tr *VSphereComputeClusterVmDependencyRule) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this VSphereComputeClusterVmDependencyRule
func (tr *VSphereComputeClusterVmDependencyRule) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this VSphereComputeClusterVmDependencyRule
func (tr *VSphereComputeClusterVmDependencyRule) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this VSphereComputeClusterVmDependencyRule using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *VSphereComputeClusterVmDependencyRule) LateInitialize(attrs []byte) (bool, error) {
	params := &VSphereComputeClusterVmDependencyRuleParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *VSphereComputeClusterVmDependencyRule) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this VSphereComputeClusterVmGroup
func (mg *VSphereComputeClusterVmGroup) GetTerraformResourceType() string {
	return "vsphere_compute_cluster_vm_group"
}

// GetConnectionDetailsMapping for this VSphereComputeClusterVmGroup
func (tr *VSphereComputeClusterVmGroup) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this VSphereComputeClusterVmGroup
func (tr *VSphereComputeClusterVmGroup) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this VSphereComputeClusterVmGroup
func (tr *VSphereComputeClusterVmGroup) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this VSphereComputeClusterVmGroup
func (tr *VSphereComputeClusterVmGroup) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this VSphereComputeClusterVmGroup
func (tr *VSphereComputeClusterVmGroup) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this VSphereComputeClusterVmGroup
func (tr *VSphereComputeClusterVmGroup) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this VSphereComputeClusterVmGroup using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *VSphereComputeClusterVmGroup) LateInitialize(attrs []byte) (bool, error) {
	params := &VSphereComputeClusterVmGroupParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *VSphereComputeClusterVmGroup) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this VSphereComputeClusterVmHostRule
func (mg *VSphereComputeClusterVmHostRule) GetTerraformResourceType() string {
	return "vsphere_compute_cluster_vm_host_rule"
}

// GetConnectionDetailsMapping for this VSphereComputeClusterVmHostRule
func (tr *VSphereComputeClusterVmHostRule) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this VSphereComputeClusterVmHostRule
func (tr *VSphereComputeClusterVmHostRule) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this VSphereComputeClusterVmHostRule
func (tr *VSphereComputeClusterVmHostRule) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this VSphereComputeClusterVmHostRule
func (tr *VSphereComputeClusterVmHostRule) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this VSphereComputeClusterVmHostRule
func (tr *VSphereComputeClusterVmHostRule) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this VSphereComputeClusterVmHostRule
func (tr *VSphereComputeClusterVmHostRule) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this VSphereComputeClusterVmHostRule using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *VSphereComputeClusterVmHostRule) LateInitialize(attrs []byte) (bool, error) {
	params := &VSphereComputeClusterVmHostRuleParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *VSphereComputeClusterVmHostRule) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this VSphereDpmHostOverride
func (mg *VSphereDpmHostOverride) GetTerraformResourceType() string {
	return "vsphere_dpm_host_override"
}

// GetConnectionDetailsMapping for this VSphereDpmHostOverride
func (tr *VSphereDpmHostOverride) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this VSphereDpmHostOverride
func (tr *VSphereDpmHostOverride) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this VSphereDpmHostOverride
func (tr *VSphereDpmHostOverride) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this VSphereDpmHostOverride
func (tr *VSphereDpmHostOverride) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this VSphereDpmHostOverride
func (tr *VSphereDpmHostOverride) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this VSphereDpmHostOverride
func (tr *VSphereDpmHostOverride) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this VSphereDpmHostOverride using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *VSphereDpmHostOverride) LateInitialize(attrs []byte) (bool, error) {
	params := &VSphereDpmHostOverrideParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *VSphereDpmHostOverride) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this VSphereDrsVmOverride
func (mg *VSphereDrsVmOverride) GetTerraformResourceType() string {
	return "vsphere_drs_vm_override"
}

// GetConnectionDetailsMapping for this VSphereDrsVmOverride
func (tr *VSphereDrsVmOverride) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this VSphereDrsVmOverride
func (tr *VSphereDrsVmOverride) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this VSphereDrsVmOverride
func (tr *VSphereDrsVmOverride) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this VSphereDrsVmOverride
func (tr *VSphereDrsVmOverride) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this VSphereDrsVmOverride
func (tr *VSphereDrsVmOverride) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this VSphereDrsVmOverride
func (tr *VSphereDrsVmOverride) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this VSphereDrsVmOverride using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *VSphereDrsVmOverride) LateInitialize(attrs []byte) (bool, error) {
	params := &VSphereDrsVmOverrideParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *VSphereDrsVmOverride) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this VSphereHaVmOverride
func (mg *VSphereHaVmOverride) GetTerraformResourceType() string {
	return "vsphere_ha_vm_override"
}

// GetConnectionDetailsMapping for this VSphereHaVmOverride
func (tr *VSphereHaVmOverride) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this VSphereHaVmOverride
func (tr *VSphereHaVmOverride) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this VSphereHaVmOverride
func (tr *VSphereHaVmOverride) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this VSphereHaVmOverride
func (tr *VSphereHaVmOverride) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this VSphereHaVmOverride
func (tr *VSphereHaVmOverride) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this VSphereHaVmOverride
func (tr *VSphereHaVmOverride) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this VSphereHaVmOverride using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *VSphereHaVmOverride) LateInitialize(attrs []byte) (bool, error) {
	params := &VSphereHaVmOverrideParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *VSphereHaVmOverride) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this VSphereHost
func (mg *VSphereHost) GetTerraformResourceType() string {
	return "vsphere_host"
}

// GetConnectionDetailsMapping for this VSphereHost
func (tr *VSphereHost) GetConnectionDetailsMapping() map[string]string {
	return map[string]string{"password": "spec.forProvider.passwordSecretRef"}
}

// GetObservation of this VSphereHost
func (tr *VSphereHost) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this VSphereHost
func (tr *VSphereHost) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this VSphereHost
func (tr *VSphereHost) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this VSphereHost
func (tr *VSphereHost) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this VSphereHost
func (tr *VSphereHost) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this VSphereHost using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *VSphereHost) LateInitialize(attrs []byte) (bool, error) {
	params := &VSphereHostParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *VSphereHost) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this VSphereResourcePool
func (mg *VSphereResourcePool) GetTerraformResourceType() string {
	return "vsphere_resource_pool"
}

// GetConnectionDetailsMapping for this VSphereResourcePool
func (tr *VSphereResourcePool) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this VSphereResourcePool
func (tr *VSphereResourcePool) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this VSphereResourcePool
func (tr *VSphereResourcePool) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this VSphereResourcePool
func (tr *VSphereResourcePool) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this VSphereResourcePool
func (tr *VSphereResourcePool) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this VSphereResourcePool
func (tr *VSphereResourcePool) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this VSphereResourcePool using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *VSphereResourcePool) LateInitialize(attrs []byte) (bool, error) {
	params := &VSphereResourcePoolParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *VSphereResourcePool) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this VSphereVnic
func (mg *VSphereVnic) GetTerraformResourceType() string {
	return "vsphere_vnic"
}

// GetConnectionDetailsMapping for this VSphereVnic
func (tr *VSphereVnic) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this VSphereVnic
func (tr *VSphereVnic) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this VSphereVnic
func (tr *VSphereVnic) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this VSphereVnic
func (tr *VSphereVnic) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this VSphereVnic
func (tr *VSphereVnic) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this VSphereVnic
func (tr *VSphereVnic) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this VSphereVnic using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *VSphereVnic) LateInitialize(attrs []byte) (bool, error) {
	params := &VSphereVnicParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *VSphereVnic) GetTerraformSchemaVersion() int {
	return 0
}
