/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type VSphereHostObservation struct {

	// ID of the vSphere cluster the host will belong to.
	Cluster *string `json:"cluster,omitempty" tf:"cluster,omitempty"`

	// Must be set if host is a member of a managed compute_cluster resource.
	ClusterManaged *bool `json:"clusterManaged,omitempty" tf:"cluster_managed,omitempty"`

	// Set the state of the host. If set to false then the host will be asked to disconnect.
	Connected *bool `json:"connected,omitempty" tf:"connected,omitempty"`

	// A list of custom attributes to set on this resource.
	CustomAttributes map[string]*string `json:"customAttributes,omitempty" tf:"custom_attributes,omitempty"`

	// ID of the vSphere datacenter the host will belong to.
	Datacenter *string `json:"datacenter,omitempty" tf:"datacenter,omitempty"`

	// Force add the host to the vSphere inventory even if it's already managed by a different vCenter Server instance.
	Force *bool `json:"force,omitempty" tf:"force,omitempty"`

	// FQDN or IP address of the host.
	Hostname *string `json:"hostname,omitempty" tf:"hostname,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// License key that will be applied to this host.
	License *string `json:"license,omitempty" tf:"license,omitempty"`

	// Set the host's lockdown status. Default is disabled. Valid options are 'disabled', 'normal', 'strict'
	Lockdown *string `json:"lockdown,omitempty" tf:"lockdown,omitempty"`

	// Set the host's maintenance mode. Default is false
	Maintenance *bool `json:"maintenance,omitempty" tf:"maintenance,omitempty"`

	// A list of tag IDs to apply to this object.
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// Host's certificate SHA-1 thumbprint. If not set then the CA that signed the host's certificate must be trusted.
	Thumbprint *string `json:"thumbprint,omitempty" tf:"thumbprint,omitempty"`

	// Username of the administration account of the host.
	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

type VSphereHostParameters struct {

	// ID of the vSphere cluster the host will belong to.
	// +kubebuilder:validation:Optional
	Cluster *string `json:"cluster,omitempty" tf:"cluster,omitempty"`

	// Must be set if host is a member of a managed compute_cluster resource.
	// +kubebuilder:validation:Optional
	ClusterManaged *bool `json:"clusterManaged,omitempty" tf:"cluster_managed,omitempty"`

	// Set the state of the host. If set to false then the host will be asked to disconnect.
	// +kubebuilder:validation:Optional
	Connected *bool `json:"connected,omitempty" tf:"connected,omitempty"`

	// A list of custom attributes to set on this resource.
	// +kubebuilder:validation:Optional
	CustomAttributes map[string]*string `json:"customAttributes,omitempty" tf:"custom_attributes,omitempty"`

	// ID of the vSphere datacenter the host will belong to.
	// +kubebuilder:validation:Optional
	Datacenter *string `json:"datacenter,omitempty" tf:"datacenter,omitempty"`

	// Force add the host to the vSphere inventory even if it's already managed by a different vCenter Server instance.
	// +kubebuilder:validation:Optional
	Force *bool `json:"force,omitempty" tf:"force,omitempty"`

	// FQDN or IP address of the host.
	// +kubebuilder:validation:Optional
	Hostname *string `json:"hostname,omitempty" tf:"hostname,omitempty"`

	// License key that will be applied to this host.
	// +kubebuilder:validation:Optional
	License *string `json:"license,omitempty" tf:"license,omitempty"`

	// Set the host's lockdown status. Default is disabled. Valid options are 'disabled', 'normal', 'strict'
	// +kubebuilder:validation:Optional
	Lockdown *string `json:"lockdown,omitempty" tf:"lockdown,omitempty"`

	// Set the host's maintenance mode. Default is false
	// +kubebuilder:validation:Optional
	Maintenance *bool `json:"maintenance,omitempty" tf:"maintenance,omitempty"`

	// Password of the administration account of the host.
	// +kubebuilder:validation:Optional
	PasswordSecretRef v1.SecretKeySelector `json:"passwordSecretRef" tf:"-"`

	// A list of tag IDs to apply to this object.
	// +kubebuilder:validation:Optional
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// Host's certificate SHA-1 thumbprint. If not set then the CA that signed the host's certificate must be trusted.
	// +kubebuilder:validation:Optional
	Thumbprint *string `json:"thumbprint,omitempty" tf:"thumbprint,omitempty"`

	// Username of the administration account of the host.
	// +kubebuilder:validation:Optional
	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

// VSphereHostSpec defines the desired state of VSphereHost
type VSphereHostSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     VSphereHostParameters `json:"forProvider"`
}

// VSphereHostStatus defines the observed state of VSphereHost.
type VSphereHostStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        VSphereHostObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// VSphereHost is the Schema for the VSphereHosts API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vsphere}
type VSphereHost struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.hostname)",message="hostname is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.passwordSecretRef)",message="passwordSecretRef is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.username)",message="username is a required parameter"
	Spec   VSphereHostSpec   `json:"spec"`
	Status VSphereHostStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// VSphereHostList contains a list of VSphereHosts
type VSphereHostList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []VSphereHost `json:"items"`
}

// Repository type metadata.
var (
	VSphereHost_Kind             = "VSphereHost"
	VSphereHost_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: VSphereHost_Kind}.String()
	VSphereHost_KindAPIVersion   = VSphereHost_Kind + "." + CRDGroupVersion.String()
	VSphereHost_GroupVersionKind = CRDGroupVersion.WithKind(VSphereHost_Kind)
)

func init() {
	SchemeBuilder.Register(&VSphereHost{}, &VSphereHostList{})
}
