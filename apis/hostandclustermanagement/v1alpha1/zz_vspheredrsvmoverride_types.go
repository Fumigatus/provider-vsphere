/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type VSphereDrsVmOverrideObservation struct {

	// The managed object ID of the cluster.
	ComputeClusterID *string `json:"computeClusterId,omitempty" tf:"compute_cluster_id,omitempty"`

	// The automation level for this virtual machine in the cluster. Can be one of manual, partiallyAutomated, or fullyAutomated.
	DrsAutomationLevel *string `json:"drsAutomationLevel,omitempty" tf:"drs_automation_level,omitempty"`

	// Enable DRS for this virtual machine.
	DrsEnabled *bool `json:"drsEnabled,omitempty" tf:"drs_enabled,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The managed object ID of the virtual machine.
	VirtualMachineID *string `json:"virtualMachineId,omitempty" tf:"virtual_machine_id,omitempty"`
}

type VSphereDrsVmOverrideParameters struct {

	// The managed object ID of the cluster.
	// +kubebuilder:validation:Optional
	ComputeClusterID *string `json:"computeClusterId,omitempty" tf:"compute_cluster_id,omitempty"`

	// The automation level for this virtual machine in the cluster. Can be one of manual, partiallyAutomated, or fullyAutomated.
	// +kubebuilder:validation:Optional
	DrsAutomationLevel *string `json:"drsAutomationLevel,omitempty" tf:"drs_automation_level,omitempty"`

	// Enable DRS for this virtual machine.
	// +kubebuilder:validation:Optional
	DrsEnabled *bool `json:"drsEnabled,omitempty" tf:"drs_enabled,omitempty"`

	// The managed object ID of the virtual machine.
	// +kubebuilder:validation:Optional
	VirtualMachineID *string `json:"virtualMachineId,omitempty" tf:"virtual_machine_id,omitempty"`
}

// VSphereDrsVmOverrideSpec defines the desired state of VSphereDrsVmOverride
type VSphereDrsVmOverrideSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     VSphereDrsVmOverrideParameters `json:"forProvider"`
}

// VSphereDrsVmOverrideStatus defines the observed state of VSphereDrsVmOverride.
type VSphereDrsVmOverrideStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        VSphereDrsVmOverrideObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// VSphereDrsVmOverride is the Schema for the VSphereDrsVmOverrides API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vsphere}
type VSphereDrsVmOverride struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.computeClusterId)",message="computeClusterId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.virtualMachineId)",message="virtualMachineId is a required parameter"
	Spec   VSphereDrsVmOverrideSpec   `json:"spec"`
	Status VSphereDrsVmOverrideStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// VSphereDrsVmOverrideList contains a list of VSphereDrsVmOverrides
type VSphereDrsVmOverrideList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []VSphereDrsVmOverride `json:"items"`
}

// Repository type metadata.
var (
	VSphereDrsVmOverride_Kind             = "VSphereDrsVmOverride"
	VSphereDrsVmOverride_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: VSphereDrsVmOverride_Kind}.String()
	VSphereDrsVmOverride_KindAPIVersion   = VSphereDrsVmOverride_Kind + "." + CRDGroupVersion.String()
	VSphereDrsVmOverride_GroupVersionKind = CRDGroupVersion.WithKind(VSphereDrsVmOverride_Kind)
)

func init() {
	SchemeBuilder.Register(&VSphereDrsVmOverride{}, &VSphereDrsVmOverrideList{})
}
