/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type VSphereComputeClusterObservation struct {

	// A list of custom attributes to set on this resource.
	CustomAttributes map[string]*string `json:"customAttributes,omitempty" tf:"custom_attributes,omitempty"`

	// The managed object ID of the datacenter to put the cluster in.
	DatacenterID *string `json:"datacenterId,omitempty" tf:"datacenter_id,omitempty"`

	// The automation level for host power operations in this cluster. Can be one of manual or automated.
	DpmAutomationLevel *string `json:"dpmAutomationLevel,omitempty" tf:"dpm_automation_level,omitempty"`

	// Enable DPM support for DRS. This allows you to dynamically control the power of hosts depending on the needs of virtual machines in the cluster. Requires that DRS be enabled.
	DpmEnabled *bool `json:"dpmEnabled,omitempty" tf:"dpm_enabled,omitempty"`

	// A value between 1 and 5 indicating the threshold of load within the cluster that influences host power operations. This affects both power on and power off operations - a lower setting will tolerate more of a surplus/deficit than a higher setting.
	DpmThreshold *float64 `json:"dpmThreshold,omitempty" tf:"dpm_threshold,omitempty"`

	// Advanced configuration options for DRS and DPM.
	DrsAdvancedOptions map[string]*string `json:"drsAdvancedOptions,omitempty" tf:"drs_advanced_options,omitempty"`

	// The default automation level for all virtual machines in this cluster. Can be one of manual, partiallyAutomated, or fullyAutomated.
	DrsAutomationLevel *string `json:"drsAutomationLevel,omitempty" tf:"drs_automation_level,omitempty"`

	// When true, enables DRS to use data from vRealize Operations Manager to make proactive DRS recommendations.
	DrsEnablePredictiveDrs *bool `json:"drsEnablePredictiveDrs,omitempty" tf:"drs_enable_predictive_drs,omitempty"`

	// When true, allows individual VM overrides within this cluster to be set.
	DrsEnableVMOverrides *bool `json:"drsEnableVmOverrides,omitempty" tf:"drs_enable_vm_overrides,omitempty"`

	// Enable DRS for this cluster.
	DrsEnabled *bool `json:"drsEnabled,omitempty" tf:"drs_enabled,omitempty"`

	// A value between 1 and 5 indicating the threshold of imbalance tolerated between hosts. A lower setting will tolerate more imbalance while a higher setting will tolerate less.
	DrsMigrationThreshold *float64 `json:"drsMigrationThreshold,omitempty" tf:"drs_migration_threshold,omitempty"`

	// Enable scalable shares for all descendants of this cluster.
	DrsScaleDescendantsShares *string `json:"drsScaleDescendantsShares,omitempty" tf:"drs_scale_descendants_shares,omitempty"`

	// The name of the folder to locate the cluster in.
	Folder *string `json:"folder,omitempty" tf:"folder,omitempty"`

	// Force removal of all hosts in the cluster during destroy and make them standalone hosts. Use of this flag mainly exists for testing and is not recommended in normal use.
	ForceEvacuateOnDestroy *bool `json:"forceEvacuateOnDestroy,omitempty" tf:"force_evacuate_on_destroy,omitempty"`

	// When ha_admission_control_policy is failoverHosts, this defines the managed object IDs of hosts to use as dedicated failover hosts. These hosts are kept as available as possible - admission control will block access to the host, and DRS will ignore the host when making recommendations.
	HaAdmissionControlFailoverHostSystemIds []*string `json:"haAdmissionControlFailoverHostSystemIds,omitempty" tf:"ha_admission_control_failover_host_system_ids,omitempty"`

	// The maximum number of failed hosts that admission control tolerates when making decisions on whether to permit virtual machine operations. The maximum is one less than the number of hosts in the cluster.
	HaAdmissionControlHostFailureTolerance *float64 `json:"haAdmissionControlHostFailureTolerance,omitempty" tf:"ha_admission_control_host_failure_tolerance,omitempty"`

	// The percentage of resource reduction that a cluster of VMs can tolerate in case of a failover. A value of 0 produces warnings only, whereas a value of 100 disables the setting.
	HaAdmissionControlPerformanceTolerance *float64 `json:"haAdmissionControlPerformanceTolerance,omitempty" tf:"ha_admission_control_performance_tolerance,omitempty"`

	// The type of admission control policy to use with vSphere HA, which controls whether or not specific VM operations are permitted in the cluster in order to protect the reliability of the cluster. Can be one of resourcePercentage, slotPolicy, failoverHosts, or disabled. Note that disabling admission control is not recommended and can lead to service issues.
	HaAdmissionControlPolicy *string `json:"haAdmissionControlPolicy,omitempty" tf:"ha_admission_control_policy,omitempty"`

	// When ha_admission_control_policy is resourcePercentage, automatically determine available resource percentages by subtracting the average number of host resources represented by the ha_admission_control_host_failure_tolerance setting from the total amount of resources in the cluster. Disable to supply user-defined values.
	HaAdmissionControlResourcePercentageAutoCompute *bool `json:"haAdmissionControlResourcePercentageAutoCompute,omitempty" tf:"ha_admission_control_resource_percentage_auto_compute,omitempty"`

	// When ha_admission_control_policy is resourcePercentage, this controls the user-defined percentage of CPU resources in the cluster to reserve for failover.
	HaAdmissionControlResourcePercentageCPU *float64 `json:"haAdmissionControlResourcePercentageCpu,omitempty" tf:"ha_admission_control_resource_percentage_cpu,omitempty"`

	// When ha_admission_control_policy is resourcePercentage, this controls the user-defined percentage of memory resources in the cluster to reserve for failover.
	HaAdmissionControlResourcePercentageMemory *float64 `json:"haAdmissionControlResourcePercentageMemory,omitempty" tf:"ha_admission_control_resource_percentage_memory,omitempty"`

	// When ha_admission_control_policy is slotPolicy, this controls the user-defined CPU slot size, in MHz.
	HaAdmissionControlSlotPolicyExplicitCPU *float64 `json:"haAdmissionControlSlotPolicyExplicitCpu,omitempty" tf:"ha_admission_control_slot_policy_explicit_cpu,omitempty"`

	// When ha_admission_control_policy is slotPolicy, this controls the user-defined memory slot size, in MB.
	HaAdmissionControlSlotPolicyExplicitMemory *float64 `json:"haAdmissionControlSlotPolicyExplicitMemory,omitempty" tf:"ha_admission_control_slot_policy_explicit_memory,omitempty"`

	// When ha_admission_control_policy is slotPolicy, this setting controls whether or not you wish to supply explicit values to CPU and memory slot sizes. The default is to gather a automatic average based on all powered-on virtual machines currently in the cluster.
	HaAdmissionControlSlotPolicyUseExplicitSize *bool `json:"haAdmissionControlSlotPolicyUseExplicitSize,omitempty" tf:"ha_admission_control_slot_policy_use_explicit_size,omitempty"`

	// Advanced configuration options for vSphere HA.
	HaAdvancedOptions map[string]*string `json:"haAdvancedOptions,omitempty" tf:"ha_advanced_options,omitempty"`

	// When ha_vm_component_protection is enabled, controls the action to take on virtual machines if an APD status on an affected datastore clears in the middle of an APD event. Can be one of none or reset.
	HaDatastoreApdRecoveryAction *string `json:"haDatastoreApdRecoveryAction,omitempty" tf:"ha_datastore_apd_recovery_action,omitempty"`

	// When ha_vm_component_protection is enabled, controls the action to take on virtual machines when the cluster has detected loss to all paths to a relevant datastore. Can be one of disabled, warning, restartConservative, or restartAggressive.
	HaDatastoreApdResponse *string `json:"haDatastoreApdResponse,omitempty" tf:"ha_datastore_apd_response,omitempty"`

	// When ha_vm_component_protection is enabled, controls the delay in seconds to wait after an APD timeout event to execute the response action defined in ha_datastore_apd_response.
	HaDatastoreApdResponseDelay *float64 `json:"haDatastoreApdResponseDelay,omitempty" tf:"ha_datastore_apd_response_delay,omitempty"`

	// When ha_vm_component_protection is enabled, controls the action to take on virtual machines when the cluster has detected a permanent device loss to a relevant datastore. Can be one of disabled, warning, or restartAggressive.
	HaDatastorePdlResponse *string `json:"haDatastorePdlResponse,omitempty" tf:"ha_datastore_pdl_response,omitempty"`

	// Enable vSphere HA for this cluster.
	HaEnabled *bool `json:"haEnabled,omitempty" tf:"ha_enabled,omitempty"`

	// The list of managed object IDs for preferred datastores to use for HA heartbeating. This setting is only useful when ha_heartbeat_datastore_policy is set to either userSelectedDs or allFeasibleDsWithUserPreference.
	HaHeartbeatDatastoreIds []*string `json:"haHeartbeatDatastoreIds,omitempty" tf:"ha_heartbeat_datastore_ids,omitempty"`

	// The selection policy for HA heartbeat datastores. Can be one of allFeasibleDs, userSelectedDs, or allFeasibleDsWithUserPreference.
	HaHeartbeatDatastorePolicy *string `json:"haHeartbeatDatastorePolicy,omitempty" tf:"ha_heartbeat_datastore_policy,omitempty"`

	// The action to take on virtual machines when a host has detected that it has been isolated from the rest of the cluster. Can be one of none, powerOff, or shutdown.
	HaHostIsolationResponse *string `json:"haHostIsolationResponse,omitempty" tf:"ha_host_isolation_response,omitempty"`

	// Global setting that controls whether vSphere HA remediates VMs on host failure. Can be one of enabled or disabled.
	HaHostMonitoring *string `json:"haHostMonitoring,omitempty" tf:"ha_host_monitoring,omitempty"`

	// Controls vSphere VM component protection for virtual machines in this cluster. This allows vSphere HA to react to failures between hosts and specific virtual machine components, such as datastores. Can be one of enabled or disabled.
	HaVMComponentProtection *string `json:"haVmComponentProtection,omitempty" tf:"ha_vm_component_protection,omitempty"`

	// The condition used to determine whether or not VMs in a certain restart priority class are online, allowing HA to move on to restarting VMs on the next priority. Can be one of none, poweredOn, guestHbStatusGreen, or appHbStatusGreen.
	HaVMDependencyRestartCondition *string `json:"haVmDependencyRestartCondition,omitempty" tf:"ha_vm_dependency_restart_condition,omitempty"`

	// If a heartbeat from a virtual machine is not received within this configured interval, the virtual machine is marked as failed. The value is in seconds.
	HaVMFailureInterval *float64 `json:"haVmFailureInterval,omitempty" tf:"ha_vm_failure_interval,omitempty"`

	// The length of the reset window in which ha_vm_maximum_resets can operate. When this window expires, no more resets are attempted regardless of the setting configured in ha_vm_maximum_resets. -1 means no window, meaning an unlimited reset time is allotted.
	HaVMMaximumFailureWindow *float64 `json:"haVmMaximumFailureWindow,omitempty" tf:"ha_vm_maximum_failure_window,omitempty"`

	// The maximum number of resets that HA will perform to a virtual machine when responding to a failure event.
	HaVMMaximumResets *float64 `json:"haVmMaximumResets,omitempty" tf:"ha_vm_maximum_resets,omitempty"`

	// The time, in seconds, that HA waits after powering on a virtual machine before monitoring for heartbeats.
	HaVMMinimumUptime *float64 `json:"haVmMinimumUptime,omitempty" tf:"ha_vm_minimum_uptime,omitempty"`

	// The type of virtual machine monitoring to use when HA is enabled in the cluster. Can be one of vmMonitoringDisabled, vmMonitoringOnly, or vmAndAppMonitoring.
	HaVMMonitoring *string `json:"haVmMonitoring,omitempty" tf:"ha_vm_monitoring,omitempty"`

	// Additional delay in seconds after ready condition is met. A VM is considered ready at this point.
	HaVMRestartAdditionalDelay *float64 `json:"haVmRestartAdditionalDelay,omitempty" tf:"ha_vm_restart_additional_delay,omitempty"`

	// The default restart priority for affected VMs when vSphere detects a host failure. Can be one of lowest, low, medium, high, or highest.
	HaVMRestartPriority *string `json:"haVmRestartPriority,omitempty" tf:"ha_vm_restart_priority,omitempty"`

	// The maximum time, in seconds, that vSphere HA will wait for virtual machines in one priority to be ready before proceeding with the next priority.
	HaVMRestartTimeout *float64 `json:"haVmRestartTimeout,omitempty" tf:"ha_vm_restart_timeout,omitempty"`

	// The timeout for each host maintenance mode operation when removing hosts from a cluster.
	HostClusterExitTimeout *float64 `json:"hostClusterExitTimeout,omitempty" tf:"host_cluster_exit_timeout,omitempty"`

	// Must be set if cluster enrollment is managed from host resource.
	HostManaged *bool `json:"hostManaged,omitempty" tf:"host_managed,omitempty"`

	// The managed object IDs of the hosts to put in the cluster.
	HostSystemIds []*string `json:"hostSystemIds,omitempty" tf:"host_system_ids,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Name for the new cluster.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The DRS behavior for proactive HA recommendations. Can be one of Automated or Manual.
	ProactiveHaAutomationLevel *string `json:"proactiveHaAutomationLevel,omitempty" tf:"proactive_ha_automation_level,omitempty"`

	// Enables proactive HA, allowing for vSphere to get HA data from external providers and use DRS to perform remediation.
	ProactiveHaEnabled *bool `json:"proactiveHaEnabled,omitempty" tf:"proactive_ha_enabled,omitempty"`

	// The configured remediation for moderately degraded hosts. Can be one of MaintenanceMode or QuarantineMode. Note that this cannot be set to MaintenanceMode when proactive_ha_severe_remediation is set to QuarantineMode.
	ProactiveHaModerateRemediation *string `json:"proactiveHaModerateRemediation,omitempty" tf:"proactive_ha_moderate_remediation,omitempty"`

	// The list of IDs for health update providers configured for this cluster.
	ProactiveHaProviderIds []*string `json:"proactiveHaProviderIds,omitempty" tf:"proactive_ha_provider_ids,omitempty"`

	// The configured remediation for severely degraded hosts. Can be one of MaintenanceMode or QuarantineMode. Note that this cannot be set to QuarantineMode when proactive_ha_moderate_remediation is set to MaintenanceMode.
	ProactiveHaSevereRemediation *string `json:"proactiveHaSevereRemediation,omitempty" tf:"proactive_ha_severe_remediation,omitempty"`

	// The managed object ID of the cluster's root resource pool.
	ResourcePoolID *string `json:"resourcePoolId,omitempty" tf:"resource_pool_id,omitempty"`

	// A list of tag IDs to apply to this object.
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// Whether the vSAN compression service is enabled for the cluster.
	VsanCompressionEnabled *bool `json:"vsanCompressionEnabled,omitempty" tf:"vsan_compression_enabled,omitempty"`

	// Whether the vSAN deduplication service is enabled for the cluster.
	VsanDedupEnabled *bool `json:"vsanDedupEnabled,omitempty" tf:"vsan_dedup_enabled,omitempty"`

	// A list of disk UUIDs to add to the vSAN cluster.
	VsanDiskGroup []VsanDiskGroupObservation `json:"vsanDiskGroup,omitempty" tf:"vsan_disk_group,omitempty"`

	// Whether the vSAN data-in-transit encryption is enabled for the cluster.
	VsanDitEncryptionEnabled *bool `json:"vsanDitEncryptionEnabled,omitempty" tf:"vsan_dit_encryption_enabled,omitempty"`

	// When vsan_dit_encryption_enabled is enabled, sets the rekey interval of data-in-transit encryption (in minutes).
	VsanDitRekeyInterval *float64 `json:"vsanDitRekeyInterval,omitempty" tf:"vsan_dit_rekey_interval,omitempty"`

	// Whether the vSAN service is enabled for the cluster.
	VsanEnabled *bool `json:"vsanEnabled,omitempty" tf:"vsan_enabled,omitempty"`

	// Whether the vSAN network diagnostic mode is enabled for the cluster.
	VsanNetworkDiagnosticModeEnabled *bool `json:"vsanNetworkDiagnosticModeEnabled,omitempty" tf:"vsan_network_diagnostic_mode_enabled,omitempty"`

	// Whether the vSAN performance service is enabled for the cluster.
	VsanPerformanceEnabled *bool `json:"vsanPerformanceEnabled,omitempty" tf:"vsan_performance_enabled,omitempty"`

	// The managed object IDs of the vSAN datastore to be mounted on the cluster.
	VsanRemoteDatastoreIds []*string `json:"vsanRemoteDatastoreIds,omitempty" tf:"vsan_remote_datastore_ids,omitempty"`

	// Whether the vSAN unmap service is enabled for the cluster.
	VsanUnmapEnabled *bool `json:"vsanUnmapEnabled,omitempty" tf:"vsan_unmap_enabled,omitempty"`

	// Whether the vSAN verbose mode is enabled for the cluster.
	VsanVerboseModeEnabled *bool `json:"vsanVerboseModeEnabled,omitempty" tf:"vsan_verbose_mode_enabled,omitempty"`
}

type VSphereComputeClusterParameters struct {

	// A list of custom attributes to set on this resource.
	// +kubebuilder:validation:Optional
	CustomAttributes map[string]*string `json:"customAttributes,omitempty" tf:"custom_attributes,omitempty"`

	// The managed object ID of the datacenter to put the cluster in.
	// +kubebuilder:validation:Optional
	DatacenterID *string `json:"datacenterId,omitempty" tf:"datacenter_id,omitempty"`

	// The automation level for host power operations in this cluster. Can be one of manual or automated.
	// +kubebuilder:validation:Optional
	DpmAutomationLevel *string `json:"dpmAutomationLevel,omitempty" tf:"dpm_automation_level,omitempty"`

	// Enable DPM support for DRS. This allows you to dynamically control the power of hosts depending on the needs of virtual machines in the cluster. Requires that DRS be enabled.
	// +kubebuilder:validation:Optional
	DpmEnabled *bool `json:"dpmEnabled,omitempty" tf:"dpm_enabled,omitempty"`

	// A value between 1 and 5 indicating the threshold of load within the cluster that influences host power operations. This affects both power on and power off operations - a lower setting will tolerate more of a surplus/deficit than a higher setting.
	// +kubebuilder:validation:Optional
	DpmThreshold *float64 `json:"dpmThreshold,omitempty" tf:"dpm_threshold,omitempty"`

	// Advanced configuration options for DRS and DPM.
	// +kubebuilder:validation:Optional
	DrsAdvancedOptions map[string]*string `json:"drsAdvancedOptions,omitempty" tf:"drs_advanced_options,omitempty"`

	// The default automation level for all virtual machines in this cluster. Can be one of manual, partiallyAutomated, or fullyAutomated.
	// +kubebuilder:validation:Optional
	DrsAutomationLevel *string `json:"drsAutomationLevel,omitempty" tf:"drs_automation_level,omitempty"`

	// When true, enables DRS to use data from vRealize Operations Manager to make proactive DRS recommendations.
	// +kubebuilder:validation:Optional
	DrsEnablePredictiveDrs *bool `json:"drsEnablePredictiveDrs,omitempty" tf:"drs_enable_predictive_drs,omitempty"`

	// When true, allows individual VM overrides within this cluster to be set.
	// +kubebuilder:validation:Optional
	DrsEnableVMOverrides *bool `json:"drsEnableVmOverrides,omitempty" tf:"drs_enable_vm_overrides,omitempty"`

	// Enable DRS for this cluster.
	// +kubebuilder:validation:Optional
	DrsEnabled *bool `json:"drsEnabled,omitempty" tf:"drs_enabled,omitempty"`

	// A value between 1 and 5 indicating the threshold of imbalance tolerated between hosts. A lower setting will tolerate more imbalance while a higher setting will tolerate less.
	// +kubebuilder:validation:Optional
	DrsMigrationThreshold *float64 `json:"drsMigrationThreshold,omitempty" tf:"drs_migration_threshold,omitempty"`

	// Enable scalable shares for all descendants of this cluster.
	// +kubebuilder:validation:Optional
	DrsScaleDescendantsShares *string `json:"drsScaleDescendantsShares,omitempty" tf:"drs_scale_descendants_shares,omitempty"`

	// The name of the folder to locate the cluster in.
	// +kubebuilder:validation:Optional
	Folder *string `json:"folder,omitempty" tf:"folder,omitempty"`

	// Force removal of all hosts in the cluster during destroy and make them standalone hosts. Use of this flag mainly exists for testing and is not recommended in normal use.
	// +kubebuilder:validation:Optional
	ForceEvacuateOnDestroy *bool `json:"forceEvacuateOnDestroy,omitempty" tf:"force_evacuate_on_destroy,omitempty"`

	// When ha_admission_control_policy is failoverHosts, this defines the managed object IDs of hosts to use as dedicated failover hosts. These hosts are kept as available as possible - admission control will block access to the host, and DRS will ignore the host when making recommendations.
	// +kubebuilder:validation:Optional
	HaAdmissionControlFailoverHostSystemIds []*string `json:"haAdmissionControlFailoverHostSystemIds,omitempty" tf:"ha_admission_control_failover_host_system_ids,omitempty"`

	// The maximum number of failed hosts that admission control tolerates when making decisions on whether to permit virtual machine operations. The maximum is one less than the number of hosts in the cluster.
	// +kubebuilder:validation:Optional
	HaAdmissionControlHostFailureTolerance *float64 `json:"haAdmissionControlHostFailureTolerance,omitempty" tf:"ha_admission_control_host_failure_tolerance,omitempty"`

	// The percentage of resource reduction that a cluster of VMs can tolerate in case of a failover. A value of 0 produces warnings only, whereas a value of 100 disables the setting.
	// +kubebuilder:validation:Optional
	HaAdmissionControlPerformanceTolerance *float64 `json:"haAdmissionControlPerformanceTolerance,omitempty" tf:"ha_admission_control_performance_tolerance,omitempty"`

	// The type of admission control policy to use with vSphere HA, which controls whether or not specific VM operations are permitted in the cluster in order to protect the reliability of the cluster. Can be one of resourcePercentage, slotPolicy, failoverHosts, or disabled. Note that disabling admission control is not recommended and can lead to service issues.
	// +kubebuilder:validation:Optional
	HaAdmissionControlPolicy *string `json:"haAdmissionControlPolicy,omitempty" tf:"ha_admission_control_policy,omitempty"`

	// When ha_admission_control_policy is resourcePercentage, automatically determine available resource percentages by subtracting the average number of host resources represented by the ha_admission_control_host_failure_tolerance setting from the total amount of resources in the cluster. Disable to supply user-defined values.
	// +kubebuilder:validation:Optional
	HaAdmissionControlResourcePercentageAutoCompute *bool `json:"haAdmissionControlResourcePercentageAutoCompute,omitempty" tf:"ha_admission_control_resource_percentage_auto_compute,omitempty"`

	// When ha_admission_control_policy is resourcePercentage, this controls the user-defined percentage of CPU resources in the cluster to reserve for failover.
	// +kubebuilder:validation:Optional
	HaAdmissionControlResourcePercentageCPU *float64 `json:"haAdmissionControlResourcePercentageCpu,omitempty" tf:"ha_admission_control_resource_percentage_cpu,omitempty"`

	// When ha_admission_control_policy is resourcePercentage, this controls the user-defined percentage of memory resources in the cluster to reserve for failover.
	// +kubebuilder:validation:Optional
	HaAdmissionControlResourcePercentageMemory *float64 `json:"haAdmissionControlResourcePercentageMemory,omitempty" tf:"ha_admission_control_resource_percentage_memory,omitempty"`

	// When ha_admission_control_policy is slotPolicy, this controls the user-defined CPU slot size, in MHz.
	// +kubebuilder:validation:Optional
	HaAdmissionControlSlotPolicyExplicitCPU *float64 `json:"haAdmissionControlSlotPolicyExplicitCpu,omitempty" tf:"ha_admission_control_slot_policy_explicit_cpu,omitempty"`

	// When ha_admission_control_policy is slotPolicy, this controls the user-defined memory slot size, in MB.
	// +kubebuilder:validation:Optional
	HaAdmissionControlSlotPolicyExplicitMemory *float64 `json:"haAdmissionControlSlotPolicyExplicitMemory,omitempty" tf:"ha_admission_control_slot_policy_explicit_memory,omitempty"`

	// When ha_admission_control_policy is slotPolicy, this setting controls whether or not you wish to supply explicit values to CPU and memory slot sizes. The default is to gather a automatic average based on all powered-on virtual machines currently in the cluster.
	// +kubebuilder:validation:Optional
	HaAdmissionControlSlotPolicyUseExplicitSize *bool `json:"haAdmissionControlSlotPolicyUseExplicitSize,omitempty" tf:"ha_admission_control_slot_policy_use_explicit_size,omitempty"`

	// Advanced configuration options for vSphere HA.
	// +kubebuilder:validation:Optional
	HaAdvancedOptions map[string]*string `json:"haAdvancedOptions,omitempty" tf:"ha_advanced_options,omitempty"`

	// When ha_vm_component_protection is enabled, controls the action to take on virtual machines if an APD status on an affected datastore clears in the middle of an APD event. Can be one of none or reset.
	// +kubebuilder:validation:Optional
	HaDatastoreApdRecoveryAction *string `json:"haDatastoreApdRecoveryAction,omitempty" tf:"ha_datastore_apd_recovery_action,omitempty"`

	// When ha_vm_component_protection is enabled, controls the action to take on virtual machines when the cluster has detected loss to all paths to a relevant datastore. Can be one of disabled, warning, restartConservative, or restartAggressive.
	// +kubebuilder:validation:Optional
	HaDatastoreApdResponse *string `json:"haDatastoreApdResponse,omitempty" tf:"ha_datastore_apd_response,omitempty"`

	// When ha_vm_component_protection is enabled, controls the delay in seconds to wait after an APD timeout event to execute the response action defined in ha_datastore_apd_response.
	// +kubebuilder:validation:Optional
	HaDatastoreApdResponseDelay *float64 `json:"haDatastoreApdResponseDelay,omitempty" tf:"ha_datastore_apd_response_delay,omitempty"`

	// When ha_vm_component_protection is enabled, controls the action to take on virtual machines when the cluster has detected a permanent device loss to a relevant datastore. Can be one of disabled, warning, or restartAggressive.
	// +kubebuilder:validation:Optional
	HaDatastorePdlResponse *string `json:"haDatastorePdlResponse,omitempty" tf:"ha_datastore_pdl_response,omitempty"`

	// Enable vSphere HA for this cluster.
	// +kubebuilder:validation:Optional
	HaEnabled *bool `json:"haEnabled,omitempty" tf:"ha_enabled,omitempty"`

	// The list of managed object IDs for preferred datastores to use for HA heartbeating. This setting is only useful when ha_heartbeat_datastore_policy is set to either userSelectedDs or allFeasibleDsWithUserPreference.
	// +kubebuilder:validation:Optional
	HaHeartbeatDatastoreIds []*string `json:"haHeartbeatDatastoreIds,omitempty" tf:"ha_heartbeat_datastore_ids,omitempty"`

	// The selection policy for HA heartbeat datastores. Can be one of allFeasibleDs, userSelectedDs, or allFeasibleDsWithUserPreference.
	// +kubebuilder:validation:Optional
	HaHeartbeatDatastorePolicy *string `json:"haHeartbeatDatastorePolicy,omitempty" tf:"ha_heartbeat_datastore_policy,omitempty"`

	// The action to take on virtual machines when a host has detected that it has been isolated from the rest of the cluster. Can be one of none, powerOff, or shutdown.
	// +kubebuilder:validation:Optional
	HaHostIsolationResponse *string `json:"haHostIsolationResponse,omitempty" tf:"ha_host_isolation_response,omitempty"`

	// Global setting that controls whether vSphere HA remediates VMs on host failure. Can be one of enabled or disabled.
	// +kubebuilder:validation:Optional
	HaHostMonitoring *string `json:"haHostMonitoring,omitempty" tf:"ha_host_monitoring,omitempty"`

	// Controls vSphere VM component protection for virtual machines in this cluster. This allows vSphere HA to react to failures between hosts and specific virtual machine components, such as datastores. Can be one of enabled or disabled.
	// +kubebuilder:validation:Optional
	HaVMComponentProtection *string `json:"haVmComponentProtection,omitempty" tf:"ha_vm_component_protection,omitempty"`

	// The condition used to determine whether or not VMs in a certain restart priority class are online, allowing HA to move on to restarting VMs on the next priority. Can be one of none, poweredOn, guestHbStatusGreen, or appHbStatusGreen.
	// +kubebuilder:validation:Optional
	HaVMDependencyRestartCondition *string `json:"haVmDependencyRestartCondition,omitempty" tf:"ha_vm_dependency_restart_condition,omitempty"`

	// If a heartbeat from a virtual machine is not received within this configured interval, the virtual machine is marked as failed. The value is in seconds.
	// +kubebuilder:validation:Optional
	HaVMFailureInterval *float64 `json:"haVmFailureInterval,omitempty" tf:"ha_vm_failure_interval,omitempty"`

	// The length of the reset window in which ha_vm_maximum_resets can operate. When this window expires, no more resets are attempted regardless of the setting configured in ha_vm_maximum_resets. -1 means no window, meaning an unlimited reset time is allotted.
	// +kubebuilder:validation:Optional
	HaVMMaximumFailureWindow *float64 `json:"haVmMaximumFailureWindow,omitempty" tf:"ha_vm_maximum_failure_window,omitempty"`

	// The maximum number of resets that HA will perform to a virtual machine when responding to a failure event.
	// +kubebuilder:validation:Optional
	HaVMMaximumResets *float64 `json:"haVmMaximumResets,omitempty" tf:"ha_vm_maximum_resets,omitempty"`

	// The time, in seconds, that HA waits after powering on a virtual machine before monitoring for heartbeats.
	// +kubebuilder:validation:Optional
	HaVMMinimumUptime *float64 `json:"haVmMinimumUptime,omitempty" tf:"ha_vm_minimum_uptime,omitempty"`

	// The type of virtual machine monitoring to use when HA is enabled in the cluster. Can be one of vmMonitoringDisabled, vmMonitoringOnly, or vmAndAppMonitoring.
	// +kubebuilder:validation:Optional
	HaVMMonitoring *string `json:"haVmMonitoring,omitempty" tf:"ha_vm_monitoring,omitempty"`

	// Additional delay in seconds after ready condition is met. A VM is considered ready at this point.
	// +kubebuilder:validation:Optional
	HaVMRestartAdditionalDelay *float64 `json:"haVmRestartAdditionalDelay,omitempty" tf:"ha_vm_restart_additional_delay,omitempty"`

	// The default restart priority for affected VMs when vSphere detects a host failure. Can be one of lowest, low, medium, high, or highest.
	// +kubebuilder:validation:Optional
	HaVMRestartPriority *string `json:"haVmRestartPriority,omitempty" tf:"ha_vm_restart_priority,omitempty"`

	// The maximum time, in seconds, that vSphere HA will wait for virtual machines in one priority to be ready before proceeding with the next priority.
	// +kubebuilder:validation:Optional
	HaVMRestartTimeout *float64 `json:"haVmRestartTimeout,omitempty" tf:"ha_vm_restart_timeout,omitempty"`

	// The timeout for each host maintenance mode operation when removing hosts from a cluster.
	// +kubebuilder:validation:Optional
	HostClusterExitTimeout *float64 `json:"hostClusterExitTimeout,omitempty" tf:"host_cluster_exit_timeout,omitempty"`

	// Must be set if cluster enrollment is managed from host resource.
	// +kubebuilder:validation:Optional
	HostManaged *bool `json:"hostManaged,omitempty" tf:"host_managed,omitempty"`

	// The managed object IDs of the hosts to put in the cluster.
	// +kubebuilder:validation:Optional
	HostSystemIds []*string `json:"hostSystemIds,omitempty" tf:"host_system_ids,omitempty"`

	// Name for the new cluster.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The DRS behavior for proactive HA recommendations. Can be one of Automated or Manual.
	// +kubebuilder:validation:Optional
	ProactiveHaAutomationLevel *string `json:"proactiveHaAutomationLevel,omitempty" tf:"proactive_ha_automation_level,omitempty"`

	// Enables proactive HA, allowing for vSphere to get HA data from external providers and use DRS to perform remediation.
	// +kubebuilder:validation:Optional
	ProactiveHaEnabled *bool `json:"proactiveHaEnabled,omitempty" tf:"proactive_ha_enabled,omitempty"`

	// The configured remediation for moderately degraded hosts. Can be one of MaintenanceMode or QuarantineMode. Note that this cannot be set to MaintenanceMode when proactive_ha_severe_remediation is set to QuarantineMode.
	// +kubebuilder:validation:Optional
	ProactiveHaModerateRemediation *string `json:"proactiveHaModerateRemediation,omitempty" tf:"proactive_ha_moderate_remediation,omitempty"`

	// The list of IDs for health update providers configured for this cluster.
	// +kubebuilder:validation:Optional
	ProactiveHaProviderIds []*string `json:"proactiveHaProviderIds,omitempty" tf:"proactive_ha_provider_ids,omitempty"`

	// The configured remediation for severely degraded hosts. Can be one of MaintenanceMode or QuarantineMode. Note that this cannot be set to QuarantineMode when proactive_ha_moderate_remediation is set to MaintenanceMode.
	// +kubebuilder:validation:Optional
	ProactiveHaSevereRemediation *string `json:"proactiveHaSevereRemediation,omitempty" tf:"proactive_ha_severe_remediation,omitempty"`

	// A list of tag IDs to apply to this object.
	// +kubebuilder:validation:Optional
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// Whether the vSAN compression service is enabled for the cluster.
	// +kubebuilder:validation:Optional
	VsanCompressionEnabled *bool `json:"vsanCompressionEnabled,omitempty" tf:"vsan_compression_enabled,omitempty"`

	// Whether the vSAN deduplication service is enabled for the cluster.
	// +kubebuilder:validation:Optional
	VsanDedupEnabled *bool `json:"vsanDedupEnabled,omitempty" tf:"vsan_dedup_enabled,omitempty"`

	// A list of disk UUIDs to add to the vSAN cluster.
	// +kubebuilder:validation:Optional
	VsanDiskGroup []VsanDiskGroupParameters `json:"vsanDiskGroup,omitempty" tf:"vsan_disk_group,omitempty"`

	// Whether the vSAN data-in-transit encryption is enabled for the cluster.
	// +kubebuilder:validation:Optional
	VsanDitEncryptionEnabled *bool `json:"vsanDitEncryptionEnabled,omitempty" tf:"vsan_dit_encryption_enabled,omitempty"`

	// When vsan_dit_encryption_enabled is enabled, sets the rekey interval of data-in-transit encryption (in minutes).
	// +kubebuilder:validation:Optional
	VsanDitRekeyInterval *float64 `json:"vsanDitRekeyInterval,omitempty" tf:"vsan_dit_rekey_interval,omitempty"`

	// Whether the vSAN service is enabled for the cluster.
	// +kubebuilder:validation:Optional
	VsanEnabled *bool `json:"vsanEnabled,omitempty" tf:"vsan_enabled,omitempty"`

	// Whether the vSAN network diagnostic mode is enabled for the cluster.
	// +kubebuilder:validation:Optional
	VsanNetworkDiagnosticModeEnabled *bool `json:"vsanNetworkDiagnosticModeEnabled,omitempty" tf:"vsan_network_diagnostic_mode_enabled,omitempty"`

	// Whether the vSAN performance service is enabled for the cluster.
	// +kubebuilder:validation:Optional
	VsanPerformanceEnabled *bool `json:"vsanPerformanceEnabled,omitempty" tf:"vsan_performance_enabled,omitempty"`

	// The managed object IDs of the vSAN datastore to be mounted on the cluster.
	// +kubebuilder:validation:Optional
	VsanRemoteDatastoreIds []*string `json:"vsanRemoteDatastoreIds,omitempty" tf:"vsan_remote_datastore_ids,omitempty"`

	// Whether the vSAN unmap service is enabled for the cluster.
	// +kubebuilder:validation:Optional
	VsanUnmapEnabled *bool `json:"vsanUnmapEnabled,omitempty" tf:"vsan_unmap_enabled,omitempty"`

	// Whether the vSAN verbose mode is enabled for the cluster.
	// +kubebuilder:validation:Optional
	VsanVerboseModeEnabled *bool `json:"vsanVerboseModeEnabled,omitempty" tf:"vsan_verbose_mode_enabled,omitempty"`
}

type VsanDiskGroupObservation struct {

	// Cache disk.
	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	// List of storage disks.
	Storage []*string `json:"storage,omitempty" tf:"storage,omitempty"`
}

type VsanDiskGroupParameters struct {

	// Cache disk.
	// +kubebuilder:validation:Optional
	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	// List of storage disks.
	// +kubebuilder:validation:Optional
	Storage []*string `json:"storage,omitempty" tf:"storage,omitempty"`
}

// VSphereComputeClusterSpec defines the desired state of VSphereComputeCluster
type VSphereComputeClusterSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     VSphereComputeClusterParameters `json:"forProvider"`
}

// VSphereComputeClusterStatus defines the observed state of VSphereComputeCluster.
type VSphereComputeClusterStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        VSphereComputeClusterObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// VSphereComputeCluster is the Schema for the VSphereComputeClusters API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vsphere}
type VSphereComputeCluster struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.datacenterId)",message="datacenterId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.name)",message="name is a required parameter"
	Spec   VSphereComputeClusterSpec   `json:"spec"`
	Status VSphereComputeClusterStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// VSphereComputeClusterList contains a list of VSphereComputeClusters
type VSphereComputeClusterList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []VSphereComputeCluster `json:"items"`
}

// Repository type metadata.
var (
	VSphereComputeCluster_Kind             = "VSphereComputeCluster"
	VSphereComputeCluster_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: VSphereComputeCluster_Kind}.String()
	VSphereComputeCluster_KindAPIVersion   = VSphereComputeCluster_Kind + "." + CRDGroupVersion.String()
	VSphereComputeCluster_GroupVersionKind = CRDGroupVersion.WithKind(VSphereComputeCluster_Kind)
)

func init() {
	SchemeBuilder.Register(&VSphereComputeCluster{}, &VSphereComputeClusterList{})
}
