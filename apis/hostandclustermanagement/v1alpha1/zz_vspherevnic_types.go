/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type IPv4Observation struct {

	// Use DHCP to configure the interface's IPv4 stack.
	DHCP *bool `json:"dhcp,omitempty" tf:"dhcp,omitempty"`

	// IP address of the default gateway, if DHCP is not set.
	Gw *string `json:"gw,omitempty" tf:"gw,omitempty"`

	// address of the interface, if DHCP is not set.
	IP *string `json:"ip,omitempty" tf:"ip,omitempty"`

	// netmask of the interface, if DHCP is not set.
	Netmask *string `json:"netmask,omitempty" tf:"netmask,omitempty"`
}

type IPv4Parameters struct {

	// Use DHCP to configure the interface's IPv4 stack.
	// +kubebuilder:validation:Optional
	DHCP *bool `json:"dhcp,omitempty" tf:"dhcp,omitempty"`

	// IP address of the default gateway, if DHCP is not set.
	// +kubebuilder:validation:Optional
	Gw *string `json:"gw,omitempty" tf:"gw,omitempty"`

	// address of the interface, if DHCP is not set.
	// +kubebuilder:validation:Optional
	IP *string `json:"ip,omitempty" tf:"ip,omitempty"`

	// netmask of the interface, if DHCP is not set.
	// +kubebuilder:validation:Optional
	Netmask *string `json:"netmask,omitempty" tf:"netmask,omitempty"`
}

type IPv6Observation struct {

	// List of IPv6 addresses
	Addresses []*string `json:"addresses,omitempty" tf:"addresses,omitempty"`

	// Use IPv6 Autoconfiguration (RFC2462).
	Autoconfig *bool `json:"autoconfig,omitempty" tf:"autoconfig,omitempty"`

	// Use DHCP to configure the interface's IPv4 stack.
	DHCP *bool `json:"dhcp,omitempty" tf:"dhcp,omitempty"`

	// IP address of the default gateway, if DHCP or autoconfig is not set.
	Gw *string `json:"gw,omitempty" tf:"gw,omitempty"`
}

type IPv6Parameters struct {

	// List of IPv6 addresses
	// +kubebuilder:validation:Optional
	Addresses []*string `json:"addresses,omitempty" tf:"addresses,omitempty"`

	// Use IPv6 Autoconfiguration (RFC2462).
	// +kubebuilder:validation:Optional
	Autoconfig *bool `json:"autoconfig,omitempty" tf:"autoconfig,omitempty"`

	// Use DHCP to configure the interface's IPv4 stack.
	// +kubebuilder:validation:Optional
	DHCP *bool `json:"dhcp,omitempty" tf:"dhcp,omitempty"`

	// IP address of the default gateway, if DHCP or autoconfig is not set.
	// +kubebuilder:validation:Optional
	Gw *string `json:"gw,omitempty" tf:"gw,omitempty"`
}

type VSphereVnicObservation struct {

	// Key of the distributed portgroup the nic will connect to
	DistributedPortGroup *string `json:"distributedPortGroup,omitempty" tf:"distributed_port_group,omitempty"`

	// UUID of the DVSwitch the nic will be attached to. Do not set if you set portgroup.
	DistributedSwitchPort *string `json:"distributedSwitchPort,omitempty" tf:"distributed_switch_port,omitempty"`

	// ESX host the interface belongs to
	Host *string `json:"host,omitempty" tf:"host,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	IPv4 []IPv4Observation `json:"ipv4,omitempty" tf:"ipv4,omitempty"`

	IPv6 []IPv6Observation `json:"ipv6,omitempty" tf:"ipv6,omitempty"`

	// MAC address of the interface.
	Mac *string `json:"mac,omitempty" tf:"mac,omitempty"`

	// MTU of the interface.
	Mtu *float64 `json:"mtu,omitempty" tf:"mtu,omitempty"`

	// TCP/IP stack setting for this interface. Possible values are 'defaultTcpipStack', 'vmotion', 'provisioning'
	Netstack *string `json:"netstack,omitempty" tf:"netstack,omitempty"`

	// portgroup to attach the nic to. Do not set if you set distributed_switch_port.
	Portgroup *string `json:"portgroup,omitempty" tf:"portgroup,omitempty"`

	// Enabled services setting for this interface. Current possible values are 'vmotion', 'management' and 'vsan'
	Services []*string `json:"services,omitempty" tf:"services,omitempty"`
}

type VSphereVnicParameters struct {

	// Key of the distributed portgroup the nic will connect to
	// +kubebuilder:validation:Optional
	DistributedPortGroup *string `json:"distributedPortGroup,omitempty" tf:"distributed_port_group,omitempty"`

	// UUID of the DVSwitch the nic will be attached to. Do not set if you set portgroup.
	// +kubebuilder:validation:Optional
	DistributedSwitchPort *string `json:"distributedSwitchPort,omitempty" tf:"distributed_switch_port,omitempty"`

	// ESX host the interface belongs to
	// +kubebuilder:validation:Optional
	Host *string `json:"host,omitempty" tf:"host,omitempty"`

	// +kubebuilder:validation:Optional
	IPv4 []IPv4Parameters `json:"ipv4,omitempty" tf:"ipv4,omitempty"`

	// +kubebuilder:validation:Optional
	IPv6 []IPv6Parameters `json:"ipv6,omitempty" tf:"ipv6,omitempty"`

	// MAC address of the interface.
	// +kubebuilder:validation:Optional
	Mac *string `json:"mac,omitempty" tf:"mac,omitempty"`

	// MTU of the interface.
	// +kubebuilder:validation:Optional
	Mtu *float64 `json:"mtu,omitempty" tf:"mtu,omitempty"`

	// TCP/IP stack setting for this interface. Possible values are 'defaultTcpipStack', 'vmotion', 'provisioning'
	// +kubebuilder:validation:Optional
	Netstack *string `json:"netstack,omitempty" tf:"netstack,omitempty"`

	// portgroup to attach the nic to. Do not set if you set distributed_switch_port.
	// +kubebuilder:validation:Optional
	Portgroup *string `json:"portgroup,omitempty" tf:"portgroup,omitempty"`

	// Enabled services setting for this interface. Current possible values are 'vmotion', 'management' and 'vsan'
	// +kubebuilder:validation:Optional
	Services []*string `json:"services,omitempty" tf:"services,omitempty"`
}

// VSphereVnicSpec defines the desired state of VSphereVnic
type VSphereVnicSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     VSphereVnicParameters `json:"forProvider"`
}

// VSphereVnicStatus defines the observed state of VSphereVnic.
type VSphereVnicStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        VSphereVnicObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// VSphereVnic is the Schema for the VSphereVnics API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vsphere}
type VSphereVnic struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.host)",message="host is a required parameter"
	Spec   VSphereVnicSpec   `json:"spec"`
	Status VSphereVnicStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// VSphereVnicList contains a list of VSphereVnics
type VSphereVnicList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []VSphereVnic `json:"items"`
}

// Repository type metadata.
var (
	VSphereVnic_Kind             = "VSphereVnic"
	VSphereVnic_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: VSphereVnic_Kind}.String()
	VSphereVnic_KindAPIVersion   = VSphereVnic_Kind + "." + CRDGroupVersion.String()
	VSphereVnic_GroupVersionKind = CRDGroupVersion.WithKind(VSphereVnic_Kind)
)

func init() {
	SchemeBuilder.Register(&VSphereVnic{}, &VSphereVnicList{})
}
