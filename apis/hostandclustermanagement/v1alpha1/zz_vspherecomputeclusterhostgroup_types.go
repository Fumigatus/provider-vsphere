/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type VSphereComputeClusterHostGroupObservation struct {

	// The managed object ID of the cluster.
	ComputeClusterID *string `json:"computeClusterId,omitempty" tf:"compute_cluster_id,omitempty"`

	// The managed object IDs of the hosts.
	HostSystemIds []*string `json:"hostSystemIds,omitempty" tf:"host_system_ids,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The unique name of the host group in the cluster.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type VSphereComputeClusterHostGroupParameters struct {

	// The managed object ID of the cluster.
	// +kubebuilder:validation:Optional
	ComputeClusterID *string `json:"computeClusterId,omitempty" tf:"compute_cluster_id,omitempty"`

	// The managed object IDs of the hosts.
	// +kubebuilder:validation:Optional
	HostSystemIds []*string `json:"hostSystemIds,omitempty" tf:"host_system_ids,omitempty"`

	// The unique name of the host group in the cluster.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

// VSphereComputeClusterHostGroupSpec defines the desired state of VSphereComputeClusterHostGroup
type VSphereComputeClusterHostGroupSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     VSphereComputeClusterHostGroupParameters `json:"forProvider"`
}

// VSphereComputeClusterHostGroupStatus defines the observed state of VSphereComputeClusterHostGroup.
type VSphereComputeClusterHostGroupStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        VSphereComputeClusterHostGroupObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// VSphereComputeClusterHostGroup is the Schema for the VSphereComputeClusterHostGroups API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vsphere}
type VSphereComputeClusterHostGroup struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.computeClusterId)",message="computeClusterId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.name)",message="name is a required parameter"
	Spec   VSphereComputeClusterHostGroupSpec   `json:"spec"`
	Status VSphereComputeClusterHostGroupStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// VSphereComputeClusterHostGroupList contains a list of VSphereComputeClusterHostGroups
type VSphereComputeClusterHostGroupList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []VSphereComputeClusterHostGroup `json:"items"`
}

// Repository type metadata.
var (
	VSphereComputeClusterHostGroup_Kind             = "VSphereComputeClusterHostGroup"
	VSphereComputeClusterHostGroup_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: VSphereComputeClusterHostGroup_Kind}.String()
	VSphereComputeClusterHostGroup_KindAPIVersion   = VSphereComputeClusterHostGroup_Kind + "." + CRDGroupVersion.String()
	VSphereComputeClusterHostGroup_GroupVersionKind = CRDGroupVersion.WithKind(VSphereComputeClusterHostGroup_Kind)
)

func init() {
	SchemeBuilder.Register(&VSphereComputeClusterHostGroup{}, &VSphereComputeClusterHostGroupList{})
}
