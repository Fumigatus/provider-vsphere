/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type VSphereDpmHostOverrideObservation struct {

	// The managed object ID of the cluster.
	ComputeClusterID *string `json:"computeClusterId,omitempty" tf:"compute_cluster_id,omitempty"`

	// The automation level for power operations on this host. Can be one of manual or automated.
	DpmAutomationLevel *string `json:"dpmAutomationLevel,omitempty" tf:"dpm_automation_level,omitempty"`

	// Enable DPM for this host.
	DpmEnabled *bool `json:"dpmEnabled,omitempty" tf:"dpm_enabled,omitempty"`

	// The managed object ID of the host.
	HostSystemID *string `json:"hostSystemId,omitempty" tf:"host_system_id,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type VSphereDpmHostOverrideParameters struct {

	// The managed object ID of the cluster.
	// +kubebuilder:validation:Optional
	ComputeClusterID *string `json:"computeClusterId,omitempty" tf:"compute_cluster_id,omitempty"`

	// The automation level for power operations on this host. Can be one of manual or automated.
	// +kubebuilder:validation:Optional
	DpmAutomationLevel *string `json:"dpmAutomationLevel,omitempty" tf:"dpm_automation_level,omitempty"`

	// Enable DPM for this host.
	// +kubebuilder:validation:Optional
	DpmEnabled *bool `json:"dpmEnabled,omitempty" tf:"dpm_enabled,omitempty"`

	// The managed object ID of the host.
	// +kubebuilder:validation:Optional
	HostSystemID *string `json:"hostSystemId,omitempty" tf:"host_system_id,omitempty"`
}

// VSphereDpmHostOverrideSpec defines the desired state of VSphereDpmHostOverride
type VSphereDpmHostOverrideSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     VSphereDpmHostOverrideParameters `json:"forProvider"`
}

// VSphereDpmHostOverrideStatus defines the observed state of VSphereDpmHostOverride.
type VSphereDpmHostOverrideStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        VSphereDpmHostOverrideObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// VSphereDpmHostOverride is the Schema for the VSphereDpmHostOverrides API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vsphere}
type VSphereDpmHostOverride struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.computeClusterId)",message="computeClusterId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.hostSystemId)",message="hostSystemId is a required parameter"
	Spec   VSphereDpmHostOverrideSpec   `json:"spec"`
	Status VSphereDpmHostOverrideStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// VSphereDpmHostOverrideList contains a list of VSphereDpmHostOverrides
type VSphereDpmHostOverrideList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []VSphereDpmHostOverride `json:"items"`
}

// Repository type metadata.
var (
	VSphereDpmHostOverride_Kind             = "VSphereDpmHostOverride"
	VSphereDpmHostOverride_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: VSphereDpmHostOverride_Kind}.String()
	VSphereDpmHostOverride_KindAPIVersion   = VSphereDpmHostOverride_Kind + "." + CRDGroupVersion.String()
	VSphereDpmHostOverride_GroupVersionKind = CRDGroupVersion.WithKind(VSphereDpmHostOverride_Kind)
)

func init() {
	SchemeBuilder.Register(&VSphereDpmHostOverride{}, &VSphereDpmHostOverrideList{})
}
