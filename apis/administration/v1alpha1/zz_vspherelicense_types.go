/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type VSphereLicenseObservation struct {
	EditionKey *string `json:"editionKey,omitempty" tf:"edition_key,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	LicenseKey *string `json:"licenseKey,omitempty" tf:"license_key,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	Total *float64 `json:"total,omitempty" tf:"total,omitempty"`

	Used *float64 `json:"used,omitempty" tf:"used,omitempty"`
}

type VSphereLicenseParameters struct {

	// +kubebuilder:validation:Optional
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// +kubebuilder:validation:Optional
	LicenseKey *string `json:"licenseKey,omitempty" tf:"license_key,omitempty"`
}

// VSphereLicenseSpec defines the desired state of VSphereLicense
type VSphereLicenseSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     VSphereLicenseParameters `json:"forProvider"`
}

// VSphereLicenseStatus defines the observed state of VSphereLicense.
type VSphereLicenseStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        VSphereLicenseObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// VSphereLicense is the Schema for the VSphereLicenses API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vsphere}
type VSphereLicense struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.licenseKey)",message="licenseKey is a required parameter"
	Spec   VSphereLicenseSpec   `json:"spec"`
	Status VSphereLicenseStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// VSphereLicenseList contains a list of VSphereLicenses
type VSphereLicenseList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []VSphereLicense `json:"items"`
}

// Repository type metadata.
var (
	VSphereLicense_Kind             = "VSphereLicense"
	VSphereLicense_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: VSphereLicense_Kind}.String()
	VSphereLicense_KindAPIVersion   = VSphereLicense_Kind + "." + CRDGroupVersion.String()
	VSphereLicense_GroupVersionKind = CRDGroupVersion.WithKind(VSphereLicense_Kind)
)

func init() {
	SchemeBuilder.Register(&VSphereLicense{}, &VSphereLicenseList{})
}
