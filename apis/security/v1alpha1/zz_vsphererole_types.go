/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type VSphereRoleObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The display label of the role.
	Label *string `json:"label,omitempty" tf:"label,omitempty"`

	// Name of the storage policy.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The privileges to be associated with the role.
	RolePrivileges []*string `json:"rolePrivileges,omitempty" tf:"role_privileges,omitempty"`
}

type VSphereRoleParameters struct {

	// Name of the storage policy.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The privileges to be associated with the role.
	// +kubebuilder:validation:Optional
	RolePrivileges []*string `json:"rolePrivileges,omitempty" tf:"role_privileges,omitempty"`
}

// VSphereRoleSpec defines the desired state of VSphereRole
type VSphereRoleSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     VSphereRoleParameters `json:"forProvider"`
}

// VSphereRoleStatus defines the observed state of VSphereRole.
type VSphereRoleStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        VSphereRoleObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// VSphereRole is the Schema for the VSphereRoles API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vsphere}
type VSphereRole struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.name)",message="name is a required parameter"
	Spec   VSphereRoleSpec   `json:"spec"`
	Status VSphereRoleStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// VSphereRoleList contains a list of VSphereRoles
type VSphereRoleList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []VSphereRole `json:"items"`
}

// Repository type metadata.
var (
	VSphereRole_Kind             = "VSphereRole"
	VSphereRole_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: VSphereRole_Kind}.String()
	VSphereRole_KindAPIVersion   = VSphereRole_Kind + "." + CRDGroupVersion.String()
	VSphereRole_GroupVersionKind = CRDGroupVersion.WithKind(VSphereRole_Kind)
)

func init() {
	SchemeBuilder.Register(&VSphereRole{}, &VSphereRoleList{})
}
