/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	"github.com/pkg/errors"

	"github.com/upbound/upjet/pkg/resource"
	"github.com/upbound/upjet/pkg/resource/json"
)

// GetTerraformResourceType returns Terraform resource type for this VSphereDatastoreCluster
func (mg *VSphereDatastoreCluster) GetTerraformResourceType() string {
	return "vsphere_datastore_cluster"
}

// GetConnectionDetailsMapping for this VSphereDatastoreCluster
func (tr *VSphereDatastoreCluster) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this VSphereDatastoreCluster
func (tr *VSphereDatastoreCluster) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this VSphereDatastoreCluster
func (tr *VSphereDatastoreCluster) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this VSphereDatastoreCluster
func (tr *VSphereDatastoreCluster) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this VSphereDatastoreCluster
func (tr *VSphereDatastoreCluster) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this VSphereDatastoreCluster
func (tr *VSphereDatastoreCluster) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this VSphereDatastoreCluster using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *VSphereDatastoreCluster) LateInitialize(attrs []byte) (bool, error) {
	params := &VSphereDatastoreClusterParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *VSphereDatastoreCluster) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this VSphereDatastoreClusterVmAntiAffinityRule
func (mg *VSphereDatastoreClusterVmAntiAffinityRule) GetTerraformResourceType() string {
	return "vsphere_datastore_cluster_vm_anti_affinity_rule"
}

// GetConnectionDetailsMapping for this VSphereDatastoreClusterVmAntiAffinityRule
func (tr *VSphereDatastoreClusterVmAntiAffinityRule) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this VSphereDatastoreClusterVmAntiAffinityRule
func (tr *VSphereDatastoreClusterVmAntiAffinityRule) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this VSphereDatastoreClusterVmAntiAffinityRule
func (tr *VSphereDatastoreClusterVmAntiAffinityRule) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this VSphereDatastoreClusterVmAntiAffinityRule
func (tr *VSphereDatastoreClusterVmAntiAffinityRule) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this VSphereDatastoreClusterVmAntiAffinityRule
func (tr *VSphereDatastoreClusterVmAntiAffinityRule) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this VSphereDatastoreClusterVmAntiAffinityRule
func (tr *VSphereDatastoreClusterVmAntiAffinityRule) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this VSphereDatastoreClusterVmAntiAffinityRule using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *VSphereDatastoreClusterVmAntiAffinityRule) LateInitialize(attrs []byte) (bool, error) {
	params := &VSphereDatastoreClusterVmAntiAffinityRuleParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *VSphereDatastoreClusterVmAntiAffinityRule) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this VSphereFile
func (mg *VSphereFile) GetTerraformResourceType() string {
	return "vsphere_file"
}

// GetConnectionDetailsMapping for this VSphereFile
func (tr *VSphereFile) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this VSphereFile
func (tr *VSphereFile) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this VSphereFile
func (tr *VSphereFile) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this VSphereFile
func (tr *VSphereFile) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this VSphereFile
func (tr *VSphereFile) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this VSphereFile
func (tr *VSphereFile) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this VSphereFile using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *VSphereFile) LateInitialize(attrs []byte) (bool, error) {
	params := &VSphereFileParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *VSphereFile) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this VSphereNasDatastore
func (mg *VSphereNasDatastore) GetTerraformResourceType() string {
	return "vsphere_nas_datastore"
}

// GetConnectionDetailsMapping for this VSphereNasDatastore
func (tr *VSphereNasDatastore) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this VSphereNasDatastore
func (tr *VSphereNasDatastore) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this VSphereNasDatastore
func (tr *VSphereNasDatastore) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this VSphereNasDatastore
func (tr *VSphereNasDatastore) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this VSphereNasDatastore
func (tr *VSphereNasDatastore) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this VSphereNasDatastore
func (tr *VSphereNasDatastore) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this VSphereNasDatastore using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *VSphereNasDatastore) LateInitialize(attrs []byte) (bool, error) {
	params := &VSphereNasDatastoreParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *VSphereNasDatastore) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this VSphereStorageDrsVmOverride
func (mg *VSphereStorageDrsVmOverride) GetTerraformResourceType() string {
	return "vsphere_storage_drs_vm_override"
}

// GetConnectionDetailsMapping for this VSphereStorageDrsVmOverride
func (tr *VSphereStorageDrsVmOverride) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this VSphereStorageDrsVmOverride
func (tr *VSphereStorageDrsVmOverride) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this VSphereStorageDrsVmOverride
func (tr *VSphereStorageDrsVmOverride) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this VSphereStorageDrsVmOverride
func (tr *VSphereStorageDrsVmOverride) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this VSphereStorageDrsVmOverride
func (tr *VSphereStorageDrsVmOverride) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this VSphereStorageDrsVmOverride
func (tr *VSphereStorageDrsVmOverride) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this VSphereStorageDrsVmOverride using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *VSphereStorageDrsVmOverride) LateInitialize(attrs []byte) (bool, error) {
	params := &VSphereStorageDrsVmOverrideParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *VSphereStorageDrsVmOverride) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this VSphereVmStoragePolicy
func (mg *VSphereVmStoragePolicy) GetTerraformResourceType() string {
	return "vsphere_vm_storage_policy"
}

// GetConnectionDetailsMapping for this VSphereVmStoragePolicy
func (tr *VSphereVmStoragePolicy) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this VSphereVmStoragePolicy
func (tr *VSphereVmStoragePolicy) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this VSphereVmStoragePolicy
func (tr *VSphereVmStoragePolicy) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this VSphereVmStoragePolicy
func (tr *VSphereVmStoragePolicy) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this VSphereVmStoragePolicy
func (tr *VSphereVmStoragePolicy) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this VSphereVmStoragePolicy
func (tr *VSphereVmStoragePolicy) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this VSphereVmStoragePolicy using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *VSphereVmStoragePolicy) LateInitialize(attrs []byte) (bool, error) {
	params := &VSphereVmStoragePolicyParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *VSphereVmStoragePolicy) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this VSphereVmfsDatastore
func (mg *VSphereVmfsDatastore) GetTerraformResourceType() string {
	return "vsphere_vmfs_datastore"
}

// GetConnectionDetailsMapping for this VSphereVmfsDatastore
func (tr *VSphereVmfsDatastore) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this VSphereVmfsDatastore
func (tr *VSphereVmfsDatastore) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this VSphereVmfsDatastore
func (tr *VSphereVmfsDatastore) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this VSphereVmfsDatastore
func (tr *VSphereVmfsDatastore) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this VSphereVmfsDatastore
func (tr *VSphereVmfsDatastore) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this VSphereVmfsDatastore
func (tr *VSphereVmfsDatastore) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this VSphereVmfsDatastore using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *VSphereVmfsDatastore) LateInitialize(attrs []byte) (bool, error) {
	params := &VSphereVmfsDatastoreParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *VSphereVmfsDatastore) GetTerraformSchemaVersion() int {
	return 0
}
