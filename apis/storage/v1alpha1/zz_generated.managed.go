/*
Copyright 2022 Upbound Inc.
*/
// Code generated by angryjet. DO NOT EDIT.

package v1alpha1

import xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"

// GetCondition of this VSphereDatastoreCluster.
func (mg *VSphereDatastoreCluster) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this VSphereDatastoreCluster.
func (mg *VSphereDatastoreCluster) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetManagementPolicy of this VSphereDatastoreCluster.
func (mg *VSphereDatastoreCluster) GetManagementPolicy() xpv1.ManagementPolicy {
	return mg.Spec.ManagementPolicy
}

// GetProviderConfigReference of this VSphereDatastoreCluster.
func (mg *VSphereDatastoreCluster) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this VSphereDatastoreCluster.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *VSphereDatastoreCluster) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetPublishConnectionDetailsTo of this VSphereDatastoreCluster.
func (mg *VSphereDatastoreCluster) GetPublishConnectionDetailsTo() *xpv1.PublishConnectionDetailsTo {
	return mg.Spec.PublishConnectionDetailsTo
}

// GetWriteConnectionSecretToReference of this VSphereDatastoreCluster.
func (mg *VSphereDatastoreCluster) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this VSphereDatastoreCluster.
func (mg *VSphereDatastoreCluster) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this VSphereDatastoreCluster.
func (mg *VSphereDatastoreCluster) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetManagementPolicy of this VSphereDatastoreCluster.
func (mg *VSphereDatastoreCluster) SetManagementPolicy(r xpv1.ManagementPolicy) {
	mg.Spec.ManagementPolicy = r
}

// SetProviderConfigReference of this VSphereDatastoreCluster.
func (mg *VSphereDatastoreCluster) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this VSphereDatastoreCluster.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *VSphereDatastoreCluster) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetPublishConnectionDetailsTo of this VSphereDatastoreCluster.
func (mg *VSphereDatastoreCluster) SetPublishConnectionDetailsTo(r *xpv1.PublishConnectionDetailsTo) {
	mg.Spec.PublishConnectionDetailsTo = r
}

// SetWriteConnectionSecretToReference of this VSphereDatastoreCluster.
func (mg *VSphereDatastoreCluster) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this VSphereDatastoreClusterVmAntiAffinityRule.
func (mg *VSphereDatastoreClusterVmAntiAffinityRule) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this VSphereDatastoreClusterVmAntiAffinityRule.
func (mg *VSphereDatastoreClusterVmAntiAffinityRule) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetManagementPolicy of this VSphereDatastoreClusterVmAntiAffinityRule.
func (mg *VSphereDatastoreClusterVmAntiAffinityRule) GetManagementPolicy() xpv1.ManagementPolicy {
	return mg.Spec.ManagementPolicy
}

// GetProviderConfigReference of this VSphereDatastoreClusterVmAntiAffinityRule.
func (mg *VSphereDatastoreClusterVmAntiAffinityRule) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this VSphereDatastoreClusterVmAntiAffinityRule.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *VSphereDatastoreClusterVmAntiAffinityRule) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetPublishConnectionDetailsTo of this VSphereDatastoreClusterVmAntiAffinityRule.
func (mg *VSphereDatastoreClusterVmAntiAffinityRule) GetPublishConnectionDetailsTo() *xpv1.PublishConnectionDetailsTo {
	return mg.Spec.PublishConnectionDetailsTo
}

// GetWriteConnectionSecretToReference of this VSphereDatastoreClusterVmAntiAffinityRule.
func (mg *VSphereDatastoreClusterVmAntiAffinityRule) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this VSphereDatastoreClusterVmAntiAffinityRule.
func (mg *VSphereDatastoreClusterVmAntiAffinityRule) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this VSphereDatastoreClusterVmAntiAffinityRule.
func (mg *VSphereDatastoreClusterVmAntiAffinityRule) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetManagementPolicy of this VSphereDatastoreClusterVmAntiAffinityRule.
func (mg *VSphereDatastoreClusterVmAntiAffinityRule) SetManagementPolicy(r xpv1.ManagementPolicy) {
	mg.Spec.ManagementPolicy = r
}

// SetProviderConfigReference of this VSphereDatastoreClusterVmAntiAffinityRule.
func (mg *VSphereDatastoreClusterVmAntiAffinityRule) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this VSphereDatastoreClusterVmAntiAffinityRule.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *VSphereDatastoreClusterVmAntiAffinityRule) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetPublishConnectionDetailsTo of this VSphereDatastoreClusterVmAntiAffinityRule.
func (mg *VSphereDatastoreClusterVmAntiAffinityRule) SetPublishConnectionDetailsTo(r *xpv1.PublishConnectionDetailsTo) {
	mg.Spec.PublishConnectionDetailsTo = r
}

// SetWriteConnectionSecretToReference of this VSphereDatastoreClusterVmAntiAffinityRule.
func (mg *VSphereDatastoreClusterVmAntiAffinityRule) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this VSphereFile.
func (mg *VSphereFile) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this VSphereFile.
func (mg *VSphereFile) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetManagementPolicy of this VSphereFile.
func (mg *VSphereFile) GetManagementPolicy() xpv1.ManagementPolicy {
	return mg.Spec.ManagementPolicy
}

// GetProviderConfigReference of this VSphereFile.
func (mg *VSphereFile) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this VSphereFile.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *VSphereFile) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetPublishConnectionDetailsTo of this VSphereFile.
func (mg *VSphereFile) GetPublishConnectionDetailsTo() *xpv1.PublishConnectionDetailsTo {
	return mg.Spec.PublishConnectionDetailsTo
}

// GetWriteConnectionSecretToReference of this VSphereFile.
func (mg *VSphereFile) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this VSphereFile.
func (mg *VSphereFile) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this VSphereFile.
func (mg *VSphereFile) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetManagementPolicy of this VSphereFile.
func (mg *VSphereFile) SetManagementPolicy(r xpv1.ManagementPolicy) {
	mg.Spec.ManagementPolicy = r
}

// SetProviderConfigReference of this VSphereFile.
func (mg *VSphereFile) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this VSphereFile.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *VSphereFile) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetPublishConnectionDetailsTo of this VSphereFile.
func (mg *VSphereFile) SetPublishConnectionDetailsTo(r *xpv1.PublishConnectionDetailsTo) {
	mg.Spec.PublishConnectionDetailsTo = r
}

// SetWriteConnectionSecretToReference of this VSphereFile.
func (mg *VSphereFile) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this VSphereNasDatastore.
func (mg *VSphereNasDatastore) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this VSphereNasDatastore.
func (mg *VSphereNasDatastore) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetManagementPolicy of this VSphereNasDatastore.
func (mg *VSphereNasDatastore) GetManagementPolicy() xpv1.ManagementPolicy {
	return mg.Spec.ManagementPolicy
}

// GetProviderConfigReference of this VSphereNasDatastore.
func (mg *VSphereNasDatastore) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this VSphereNasDatastore.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *VSphereNasDatastore) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetPublishConnectionDetailsTo of this VSphereNasDatastore.
func (mg *VSphereNasDatastore) GetPublishConnectionDetailsTo() *xpv1.PublishConnectionDetailsTo {
	return mg.Spec.PublishConnectionDetailsTo
}

// GetWriteConnectionSecretToReference of this VSphereNasDatastore.
func (mg *VSphereNasDatastore) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this VSphereNasDatastore.
func (mg *VSphereNasDatastore) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this VSphereNasDatastore.
func (mg *VSphereNasDatastore) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetManagementPolicy of this VSphereNasDatastore.
func (mg *VSphereNasDatastore) SetManagementPolicy(r xpv1.ManagementPolicy) {
	mg.Spec.ManagementPolicy = r
}

// SetProviderConfigReference of this VSphereNasDatastore.
func (mg *VSphereNasDatastore) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this VSphereNasDatastore.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *VSphereNasDatastore) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetPublishConnectionDetailsTo of this VSphereNasDatastore.
func (mg *VSphereNasDatastore) SetPublishConnectionDetailsTo(r *xpv1.PublishConnectionDetailsTo) {
	mg.Spec.PublishConnectionDetailsTo = r
}

// SetWriteConnectionSecretToReference of this VSphereNasDatastore.
func (mg *VSphereNasDatastore) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this VSphereStorageDrsVmOverride.
func (mg *VSphereStorageDrsVmOverride) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this VSphereStorageDrsVmOverride.
func (mg *VSphereStorageDrsVmOverride) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetManagementPolicy of this VSphereStorageDrsVmOverride.
func (mg *VSphereStorageDrsVmOverride) GetManagementPolicy() xpv1.ManagementPolicy {
	return mg.Spec.ManagementPolicy
}

// GetProviderConfigReference of this VSphereStorageDrsVmOverride.
func (mg *VSphereStorageDrsVmOverride) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this VSphereStorageDrsVmOverride.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *VSphereStorageDrsVmOverride) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetPublishConnectionDetailsTo of this VSphereStorageDrsVmOverride.
func (mg *VSphereStorageDrsVmOverride) GetPublishConnectionDetailsTo() *xpv1.PublishConnectionDetailsTo {
	return mg.Spec.PublishConnectionDetailsTo
}

// GetWriteConnectionSecretToReference of this VSphereStorageDrsVmOverride.
func (mg *VSphereStorageDrsVmOverride) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this VSphereStorageDrsVmOverride.
func (mg *VSphereStorageDrsVmOverride) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this VSphereStorageDrsVmOverride.
func (mg *VSphereStorageDrsVmOverride) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetManagementPolicy of this VSphereStorageDrsVmOverride.
func (mg *VSphereStorageDrsVmOverride) SetManagementPolicy(r xpv1.ManagementPolicy) {
	mg.Spec.ManagementPolicy = r
}

// SetProviderConfigReference of this VSphereStorageDrsVmOverride.
func (mg *VSphereStorageDrsVmOverride) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this VSphereStorageDrsVmOverride.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *VSphereStorageDrsVmOverride) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetPublishConnectionDetailsTo of this VSphereStorageDrsVmOverride.
func (mg *VSphereStorageDrsVmOverride) SetPublishConnectionDetailsTo(r *xpv1.PublishConnectionDetailsTo) {
	mg.Spec.PublishConnectionDetailsTo = r
}

// SetWriteConnectionSecretToReference of this VSphereStorageDrsVmOverride.
func (mg *VSphereStorageDrsVmOverride) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this VSphereVmStoragePolicy.
func (mg *VSphereVmStoragePolicy) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this VSphereVmStoragePolicy.
func (mg *VSphereVmStoragePolicy) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetManagementPolicy of this VSphereVmStoragePolicy.
func (mg *VSphereVmStoragePolicy) GetManagementPolicy() xpv1.ManagementPolicy {
	return mg.Spec.ManagementPolicy
}

// GetProviderConfigReference of this VSphereVmStoragePolicy.
func (mg *VSphereVmStoragePolicy) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this VSphereVmStoragePolicy.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *VSphereVmStoragePolicy) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetPublishConnectionDetailsTo of this VSphereVmStoragePolicy.
func (mg *VSphereVmStoragePolicy) GetPublishConnectionDetailsTo() *xpv1.PublishConnectionDetailsTo {
	return mg.Spec.PublishConnectionDetailsTo
}

// GetWriteConnectionSecretToReference of this VSphereVmStoragePolicy.
func (mg *VSphereVmStoragePolicy) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this VSphereVmStoragePolicy.
func (mg *VSphereVmStoragePolicy) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this VSphereVmStoragePolicy.
func (mg *VSphereVmStoragePolicy) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetManagementPolicy of this VSphereVmStoragePolicy.
func (mg *VSphereVmStoragePolicy) SetManagementPolicy(r xpv1.ManagementPolicy) {
	mg.Spec.ManagementPolicy = r
}

// SetProviderConfigReference of this VSphereVmStoragePolicy.
func (mg *VSphereVmStoragePolicy) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this VSphereVmStoragePolicy.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *VSphereVmStoragePolicy) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetPublishConnectionDetailsTo of this VSphereVmStoragePolicy.
func (mg *VSphereVmStoragePolicy) SetPublishConnectionDetailsTo(r *xpv1.PublishConnectionDetailsTo) {
	mg.Spec.PublishConnectionDetailsTo = r
}

// SetWriteConnectionSecretToReference of this VSphereVmStoragePolicy.
func (mg *VSphereVmStoragePolicy) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this VSphereVmfsDatastore.
func (mg *VSphereVmfsDatastore) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this VSphereVmfsDatastore.
func (mg *VSphereVmfsDatastore) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetManagementPolicy of this VSphereVmfsDatastore.
func (mg *VSphereVmfsDatastore) GetManagementPolicy() xpv1.ManagementPolicy {
	return mg.Spec.ManagementPolicy
}

// GetProviderConfigReference of this VSphereVmfsDatastore.
func (mg *VSphereVmfsDatastore) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this VSphereVmfsDatastore.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *VSphereVmfsDatastore) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetPublishConnectionDetailsTo of this VSphereVmfsDatastore.
func (mg *VSphereVmfsDatastore) GetPublishConnectionDetailsTo() *xpv1.PublishConnectionDetailsTo {
	return mg.Spec.PublishConnectionDetailsTo
}

// GetWriteConnectionSecretToReference of this VSphereVmfsDatastore.
func (mg *VSphereVmfsDatastore) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this VSphereVmfsDatastore.
func (mg *VSphereVmfsDatastore) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this VSphereVmfsDatastore.
func (mg *VSphereVmfsDatastore) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetManagementPolicy of this VSphereVmfsDatastore.
func (mg *VSphereVmfsDatastore) SetManagementPolicy(r xpv1.ManagementPolicy) {
	mg.Spec.ManagementPolicy = r
}

// SetProviderConfigReference of this VSphereVmfsDatastore.
func (mg *VSphereVmfsDatastore) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this VSphereVmfsDatastore.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *VSphereVmfsDatastore) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetPublishConnectionDetailsTo of this VSphereVmfsDatastore.
func (mg *VSphereVmfsDatastore) SetPublishConnectionDetailsTo(r *xpv1.PublishConnectionDetailsTo) {
	mg.Spec.PublishConnectionDetailsTo = r
}

// SetWriteConnectionSecretToReference of this VSphereVmfsDatastore.
func (mg *VSphereVmfsDatastore) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}
