/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type VSphereDatastoreClusterVmAntiAffinityRuleObservation struct {

	// The managed object ID of the datastore cluster.
	DatastoreClusterID *string `json:"datastoreClusterId,omitempty" tf:"datastore_cluster_id,omitempty"`

	// Enable this rule in the cluster.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// When true, prevents any virtual machine operations that may violate this rule.
	Mandatory *bool `json:"mandatory,omitempty" tf:"mandatory,omitempty"`

	// The unique name of the virtual machine group in the cluster.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The UUIDs of the virtual machines to run on different datastores from each other.
	VirtualMachineIds []*string `json:"virtualMachineIds,omitempty" tf:"virtual_machine_ids,omitempty"`
}

type VSphereDatastoreClusterVmAntiAffinityRuleParameters struct {

	// The managed object ID of the datastore cluster.
	// +kubebuilder:validation:Optional
	DatastoreClusterID *string `json:"datastoreClusterId,omitempty" tf:"datastore_cluster_id,omitempty"`

	// Enable this rule in the cluster.
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// When true, prevents any virtual machine operations that may violate this rule.
	// +kubebuilder:validation:Optional
	Mandatory *bool `json:"mandatory,omitempty" tf:"mandatory,omitempty"`

	// The unique name of the virtual machine group in the cluster.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The UUIDs of the virtual machines to run on different datastores from each other.
	// +kubebuilder:validation:Optional
	VirtualMachineIds []*string `json:"virtualMachineIds,omitempty" tf:"virtual_machine_ids,omitempty"`
}

// VSphereDatastoreClusterVmAntiAffinityRuleSpec defines the desired state of VSphereDatastoreClusterVmAntiAffinityRule
type VSphereDatastoreClusterVmAntiAffinityRuleSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     VSphereDatastoreClusterVmAntiAffinityRuleParameters `json:"forProvider"`
}

// VSphereDatastoreClusterVmAntiAffinityRuleStatus defines the observed state of VSphereDatastoreClusterVmAntiAffinityRule.
type VSphereDatastoreClusterVmAntiAffinityRuleStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        VSphereDatastoreClusterVmAntiAffinityRuleObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// VSphereDatastoreClusterVmAntiAffinityRule is the Schema for the VSphereDatastoreClusterVmAntiAffinityRules API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vsphere}
type VSphereDatastoreClusterVmAntiAffinityRule struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.datastoreClusterId)",message="datastoreClusterId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.name)",message="name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.virtualMachineIds)",message="virtualMachineIds is a required parameter"
	Spec   VSphereDatastoreClusterVmAntiAffinityRuleSpec   `json:"spec"`
	Status VSphereDatastoreClusterVmAntiAffinityRuleStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// VSphereDatastoreClusterVmAntiAffinityRuleList contains a list of VSphereDatastoreClusterVmAntiAffinityRules
type VSphereDatastoreClusterVmAntiAffinityRuleList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []VSphereDatastoreClusterVmAntiAffinityRule `json:"items"`
}

// Repository type metadata.
var (
	VSphereDatastoreClusterVmAntiAffinityRule_Kind             = "VSphereDatastoreClusterVmAntiAffinityRule"
	VSphereDatastoreClusterVmAntiAffinityRule_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: VSphereDatastoreClusterVmAntiAffinityRule_Kind}.String()
	VSphereDatastoreClusterVmAntiAffinityRule_KindAPIVersion   = VSphereDatastoreClusterVmAntiAffinityRule_Kind + "." + CRDGroupVersion.String()
	VSphereDatastoreClusterVmAntiAffinityRule_GroupVersionKind = CRDGroupVersion.WithKind(VSphereDatastoreClusterVmAntiAffinityRule_Kind)
)

func init() {
	SchemeBuilder.Register(&VSphereDatastoreClusterVmAntiAffinityRule{}, &VSphereDatastoreClusterVmAntiAffinityRuleList{})
}
