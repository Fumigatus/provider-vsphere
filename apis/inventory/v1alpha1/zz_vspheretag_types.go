/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type VSphereTagObservation struct {

	// The unique identifier of the parent category in which this tag will be created.
	CategoryID *string `json:"categoryId,omitempty" tf:"category_id,omitempty"`

	// The description of the tag.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The display name of the tag. The name must be unique within its category.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type VSphereTagParameters struct {

	// The unique identifier of the parent category in which this tag will be created.
	// +kubebuilder:validation:Optional
	CategoryID *string `json:"categoryId,omitempty" tf:"category_id,omitempty"`

	// The description of the tag.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The display name of the tag. The name must be unique within its category.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

// VSphereTagSpec defines the desired state of VSphereTag
type VSphereTagSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     VSphereTagParameters `json:"forProvider"`
}

// VSphereTagStatus defines the observed state of VSphereTag.
type VSphereTagStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        VSphereTagObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// VSphereTag is the Schema for the VSphereTags API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vsphere}
type VSphereTag struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.categoryId)",message="categoryId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.name)",message="name is a required parameter"
	Spec   VSphereTagSpec   `json:"spec"`
	Status VSphereTagStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// VSphereTagList contains a list of VSphereTags
type VSphereTagList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []VSphereTag `json:"items"`
}

// Repository type metadata.
var (
	VSphereTag_Kind             = "VSphereTag"
	VSphereTag_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: VSphereTag_Kind}.String()
	VSphereTag_KindAPIVersion   = VSphereTag_Kind + "." + CRDGroupVersion.String()
	VSphereTag_GroupVersionKind = CRDGroupVersion.WithKind(VSphereTag_Kind)
)

func init() {
	SchemeBuilder.Register(&VSphereTag{}, &VSphereTagList{})
}
