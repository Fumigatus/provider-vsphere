/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type VSphereFolderObservation struct {

	// A list of custom attributes to set on this resource.
	CustomAttributes map[string]*string `json:"customAttributes,omitempty" tf:"custom_attributes,omitempty"`

	// The ID of the datacenter. Can be ignored if creating a datacenter folder, otherwise required.
	DatacenterID *string `json:"datacenterId,omitempty" tf:"datacenter_id,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The path of the folder and any parents, relative to the datacenter and folder type being defined.
	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	// A list of tag IDs to apply to this object.
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// The type of the folder.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type VSphereFolderParameters struct {

	// A list of custom attributes to set on this resource.
	// +kubebuilder:validation:Optional
	CustomAttributes map[string]*string `json:"customAttributes,omitempty" tf:"custom_attributes,omitempty"`

	// The ID of the datacenter. Can be ignored if creating a datacenter folder, otherwise required.
	// +kubebuilder:validation:Optional
	DatacenterID *string `json:"datacenterId,omitempty" tf:"datacenter_id,omitempty"`

	// The path of the folder and any parents, relative to the datacenter and folder type being defined.
	// +kubebuilder:validation:Optional
	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	// A list of tag IDs to apply to this object.
	// +kubebuilder:validation:Optional
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// The type of the folder.
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

// VSphereFolderSpec defines the desired state of VSphereFolder
type VSphereFolderSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     VSphereFolderParameters `json:"forProvider"`
}

// VSphereFolderStatus defines the observed state of VSphereFolder.
type VSphereFolderStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        VSphereFolderObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// VSphereFolder is the Schema for the VSphereFolders API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vsphere}
type VSphereFolder struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.path)",message="path is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.type)",message="type is a required parameter"
	Spec   VSphereFolderSpec   `json:"spec"`
	Status VSphereFolderStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// VSphereFolderList contains a list of VSphereFolders
type VSphereFolderList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []VSphereFolder `json:"items"`
}

// Repository type metadata.
var (
	VSphereFolder_Kind             = "VSphereFolder"
	VSphereFolder_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: VSphereFolder_Kind}.String()
	VSphereFolder_KindAPIVersion   = VSphereFolder_Kind + "." + CRDGroupVersion.String()
	VSphereFolder_GroupVersionKind = CRDGroupVersion.WithKind(VSphereFolder_Kind)
)

func init() {
	SchemeBuilder.Register(&VSphereFolder{}, &VSphereFolderList{})
}
