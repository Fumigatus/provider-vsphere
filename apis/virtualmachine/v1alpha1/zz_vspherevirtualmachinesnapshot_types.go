/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type VSphereVirtualMachineSnapshotObservation struct {
	Consolidate *bool `json:"consolidate,omitempty" tf:"consolidate,omitempty"`

	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Memory *bool `json:"memory,omitempty" tf:"memory,omitempty"`

	Quiesce *bool `json:"quiesce,omitempty" tf:"quiesce,omitempty"`

	RemoveChildren *bool `json:"removeChildren,omitempty" tf:"remove_children,omitempty"`

	SnapshotName *string `json:"snapshotName,omitempty" tf:"snapshot_name,omitempty"`

	VirtualMachineUUID *string `json:"virtualMachineUuid,omitempty" tf:"virtual_machine_uuid,omitempty"`
}

type VSphereVirtualMachineSnapshotParameters struct {

	// +kubebuilder:validation:Optional
	Consolidate *bool `json:"consolidate,omitempty" tf:"consolidate,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Optional
	Memory *bool `json:"memory,omitempty" tf:"memory,omitempty"`

	// +kubebuilder:validation:Optional
	Quiesce *bool `json:"quiesce,omitempty" tf:"quiesce,omitempty"`

	// +kubebuilder:validation:Optional
	RemoveChildren *bool `json:"removeChildren,omitempty" tf:"remove_children,omitempty"`

	// +kubebuilder:validation:Optional
	SnapshotName *string `json:"snapshotName,omitempty" tf:"snapshot_name,omitempty"`

	// +kubebuilder:validation:Optional
	VirtualMachineUUID *string `json:"virtualMachineUuid,omitempty" tf:"virtual_machine_uuid,omitempty"`
}

// VSphereVirtualMachineSnapshotSpec defines the desired state of VSphereVirtualMachineSnapshot
type VSphereVirtualMachineSnapshotSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     VSphereVirtualMachineSnapshotParameters `json:"forProvider"`
}

// VSphereVirtualMachineSnapshotStatus defines the observed state of VSphereVirtualMachineSnapshot.
type VSphereVirtualMachineSnapshotStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        VSphereVirtualMachineSnapshotObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// VSphereVirtualMachineSnapshot is the Schema for the VSphereVirtualMachineSnapshots API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vsphere}
type VSphereVirtualMachineSnapshot struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.description)",message="description is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.memory)",message="memory is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.quiesce)",message="quiesce is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.snapshotName)",message="snapshotName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.virtualMachineUuid)",message="virtualMachineUuid is a required parameter"
	Spec   VSphereVirtualMachineSnapshotSpec   `json:"spec"`
	Status VSphereVirtualMachineSnapshotStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// VSphereVirtualMachineSnapshotList contains a list of VSphereVirtualMachineSnapshots
type VSphereVirtualMachineSnapshotList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []VSphereVirtualMachineSnapshot `json:"items"`
}

// Repository type metadata.
var (
	VSphereVirtualMachineSnapshot_Kind             = "VSphereVirtualMachineSnapshot"
	VSphereVirtualMachineSnapshot_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: VSphereVirtualMachineSnapshot_Kind}.String()
	VSphereVirtualMachineSnapshot_KindAPIVersion   = VSphereVirtualMachineSnapshot_Kind + "." + CRDGroupVersion.String()
	VSphereVirtualMachineSnapshot_GroupVersionKind = CRDGroupVersion.WithKind(VSphereVirtualMachineSnapshot_Kind)
)

func init() {
	SchemeBuilder.Register(&VSphereVirtualMachineSnapshot{}, &VSphereVirtualMachineSnapshotList{})
}
