/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type VSphereVappContainerObservation struct {

	// Determines if the reservation on a vApp container can grow beyond the specified value, if the parent resource pool has unreserved resources.
	CPUExpandable *bool `json:"cpuExpandable,omitempty" tf:"cpu_expandable,omitempty"`

	// The utilization of a vApp container will not exceed this limit, even if there are available resources. Set to -1 for unlimited.
	CPULimit *float64 `json:"cpuLimit,omitempty" tf:"cpu_limit,omitempty"`

	// Amount of CPU (MHz) that is guaranteed available to the vApp container.
	CPUReservation *float64 `json:"cpuReservation,omitempty" tf:"cpu_reservation,omitempty"`

	// The allocation level. The level is a simplified view of shares. Levels map to a pre-determined set of numeric values for shares. Can be one of low, normal, high, or custom.
	CPUShareLevel *string `json:"cpuShareLevel,omitempty" tf:"cpu_share_level,omitempty"`

	// The number of shares allocated. Used to determine resource allocation in case of resource contention. If this is set, cpu_share_level must be custom.
	CPUShares *float64 `json:"cpuShares,omitempty" tf:"cpu_shares,omitempty"`

	// A list of custom attributes to set on this resource.
	CustomAttributes map[string]*string `json:"customAttributes,omitempty" tf:"custom_attributes,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Determines if the reservation on a vApp container can grow beyond the specified value, if the parent resource pool has unreserved resources.
	MemoryExpandable *bool `json:"memoryExpandable,omitempty" tf:"memory_expandable,omitempty"`

	// The utilization of a vApp container will not exceed this limit, even if there are available resources. Set to -1 for unlimited.
	MemoryLimit *float64 `json:"memoryLimit,omitempty" tf:"memory_limit,omitempty"`

	// Amount of memory (MB) that is guaranteed available to the vApp container.
	MemoryReservation *float64 `json:"memoryReservation,omitempty" tf:"memory_reservation,omitempty"`

	// The allocation level. The level is a simplified view of shares. Levels map to a pre-determined set of numeric values for shares. Can be one of low, normal, high, or custom.
	MemoryShareLevel *string `json:"memoryShareLevel,omitempty" tf:"memory_share_level,omitempty"`

	// The number of shares allocated. Used to determine resource allocation in case of resource contention. If this is set, memory_share_level must be custom.
	MemoryShares *float64 `json:"memoryShares,omitempty" tf:"memory_shares,omitempty"`

	// The name of the vApp container.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The ID of the parent VM folder.
	ParentFolderID *string `json:"parentFolderId,omitempty" tf:"parent_folder_id,omitempty"`

	// The managed object ID of the parent resource pool or the compute resource the vApp container is in.
	ParentResourcePoolID *string `json:"parentResourcePoolId,omitempty" tf:"parent_resource_pool_id,omitempty"`

	// A list of tag IDs to apply to this object.
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

type VSphereVappContainerParameters struct {

	// Determines if the reservation on a vApp container can grow beyond the specified value, if the parent resource pool has unreserved resources.
	// +kubebuilder:validation:Optional
	CPUExpandable *bool `json:"cpuExpandable,omitempty" tf:"cpu_expandable,omitempty"`

	// The utilization of a vApp container will not exceed this limit, even if there are available resources. Set to -1 for unlimited.
	// +kubebuilder:validation:Optional
	CPULimit *float64 `json:"cpuLimit,omitempty" tf:"cpu_limit,omitempty"`

	// Amount of CPU (MHz) that is guaranteed available to the vApp container.
	// +kubebuilder:validation:Optional
	CPUReservation *float64 `json:"cpuReservation,omitempty" tf:"cpu_reservation,omitempty"`

	// The allocation level. The level is a simplified view of shares. Levels map to a pre-determined set of numeric values for shares. Can be one of low, normal, high, or custom.
	// +kubebuilder:validation:Optional
	CPUShareLevel *string `json:"cpuShareLevel,omitempty" tf:"cpu_share_level,omitempty"`

	// The number of shares allocated. Used to determine resource allocation in case of resource contention. If this is set, cpu_share_level must be custom.
	// +kubebuilder:validation:Optional
	CPUShares *float64 `json:"cpuShares,omitempty" tf:"cpu_shares,omitempty"`

	// A list of custom attributes to set on this resource.
	// +kubebuilder:validation:Optional
	CustomAttributes map[string]*string `json:"customAttributes,omitempty" tf:"custom_attributes,omitempty"`

	// Determines if the reservation on a vApp container can grow beyond the specified value, if the parent resource pool has unreserved resources.
	// +kubebuilder:validation:Optional
	MemoryExpandable *bool `json:"memoryExpandable,omitempty" tf:"memory_expandable,omitempty"`

	// The utilization of a vApp container will not exceed this limit, even if there are available resources. Set to -1 for unlimited.
	// +kubebuilder:validation:Optional
	MemoryLimit *float64 `json:"memoryLimit,omitempty" tf:"memory_limit,omitempty"`

	// Amount of memory (MB) that is guaranteed available to the vApp container.
	// +kubebuilder:validation:Optional
	MemoryReservation *float64 `json:"memoryReservation,omitempty" tf:"memory_reservation,omitempty"`

	// The allocation level. The level is a simplified view of shares. Levels map to a pre-determined set of numeric values for shares. Can be one of low, normal, high, or custom.
	// +kubebuilder:validation:Optional
	MemoryShareLevel *string `json:"memoryShareLevel,omitempty" tf:"memory_share_level,omitempty"`

	// The number of shares allocated. Used to determine resource allocation in case of resource contention. If this is set, memory_share_level must be custom.
	// +kubebuilder:validation:Optional
	MemoryShares *float64 `json:"memoryShares,omitempty" tf:"memory_shares,omitempty"`

	// The name of the vApp container.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The ID of the parent VM folder.
	// +kubebuilder:validation:Optional
	ParentFolderID *string `json:"parentFolderId,omitempty" tf:"parent_folder_id,omitempty"`

	// The managed object ID of the parent resource pool or the compute resource the vApp container is in.
	// +kubebuilder:validation:Optional
	ParentResourcePoolID *string `json:"parentResourcePoolId,omitempty" tf:"parent_resource_pool_id,omitempty"`

	// A list of tag IDs to apply to this object.
	// +kubebuilder:validation:Optional
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

// VSphereVappContainerSpec defines the desired state of VSphereVappContainer
type VSphereVappContainerSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     VSphereVappContainerParameters `json:"forProvider"`
}

// VSphereVappContainerStatus defines the observed state of VSphereVappContainer.
type VSphereVappContainerStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        VSphereVappContainerObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// VSphereVappContainer is the Schema for the VSphereVappContainers API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vsphere}
type VSphereVappContainer struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.name)",message="name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.parentResourcePoolId)",message="parentResourcePoolId is a required parameter"
	Spec   VSphereVappContainerSpec   `json:"spec"`
	Status VSphereVappContainerStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// VSphereVappContainerList contains a list of VSphereVappContainers
type VSphereVappContainerList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []VSphereVappContainer `json:"items"`
}

// Repository type metadata.
var (
	VSphereVappContainer_Kind             = "VSphereVappContainer"
	VSphereVappContainer_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: VSphereVappContainer_Kind}.String()
	VSphereVappContainer_KindAPIVersion   = VSphereVappContainer_Kind + "." + CRDGroupVersion.String()
	VSphereVappContainer_GroupVersionKind = CRDGroupVersion.WithKind(VSphereVappContainer_Kind)
)

func init() {
	SchemeBuilder.Register(&VSphereVappContainer{}, &VSphereVappContainerList{})
}
