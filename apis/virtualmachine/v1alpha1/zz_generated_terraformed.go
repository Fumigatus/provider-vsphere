/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	"github.com/pkg/errors"

	"github.com/upbound/upjet/pkg/resource"
	"github.com/upbound/upjet/pkg/resource/json"
)

// GetTerraformResourceType returns Terraform resource type for this VSphereContentLibrary
func (mg *VSphereContentLibrary) GetTerraformResourceType() string {
	return "vsphere_content_library"
}

// GetConnectionDetailsMapping for this VSphereContentLibrary
func (tr *VSphereContentLibrary) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this VSphereContentLibrary
func (tr *VSphereContentLibrary) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this VSphereContentLibrary
func (tr *VSphereContentLibrary) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this VSphereContentLibrary
func (tr *VSphereContentLibrary) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this VSphereContentLibrary
func (tr *VSphereContentLibrary) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this VSphereContentLibrary
func (tr *VSphereContentLibrary) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this VSphereContentLibrary using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *VSphereContentLibrary) LateInitialize(attrs []byte) (bool, error) {
	params := &VSphereContentLibraryParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *VSphereContentLibrary) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this VSphereContentLibraryItem
func (mg *VSphereContentLibraryItem) GetTerraformResourceType() string {
	return "vsphere_content_library_item"
}

// GetConnectionDetailsMapping for this VSphereContentLibraryItem
func (tr *VSphereContentLibraryItem) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this VSphereContentLibraryItem
func (tr *VSphereContentLibraryItem) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this VSphereContentLibraryItem
func (tr *VSphereContentLibraryItem) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this VSphereContentLibraryItem
func (tr *VSphereContentLibraryItem) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this VSphereContentLibraryItem
func (tr *VSphereContentLibraryItem) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this VSphereContentLibraryItem
func (tr *VSphereContentLibraryItem) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this VSphereContentLibraryItem using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *VSphereContentLibraryItem) LateInitialize(attrs []byte) (bool, error) {
	params := &VSphereContentLibraryItemParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *VSphereContentLibraryItem) GetTerraformSchemaVersion() int {
	return 1
}

// GetTerraformResourceType returns Terraform resource type for this VSphereVappContainer
func (mg *VSphereVappContainer) GetTerraformResourceType() string {
	return "vsphere_vapp_container"
}

// GetConnectionDetailsMapping for this VSphereVappContainer
func (tr *VSphereVappContainer) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this VSphereVappContainer
func (tr *VSphereVappContainer) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this VSphereVappContainer
func (tr *VSphereVappContainer) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this VSphereVappContainer
func (tr *VSphereVappContainer) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this VSphereVappContainer
func (tr *VSphereVappContainer) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this VSphereVappContainer
func (tr *VSphereVappContainer) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this VSphereVappContainer using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *VSphereVappContainer) LateInitialize(attrs []byte) (bool, error) {
	params := &VSphereVappContainerParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *VSphereVappContainer) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this VSphereVappEntity
func (mg *VSphereVappEntity) GetTerraformResourceType() string {
	return "vsphere_vapp_entity"
}

// GetConnectionDetailsMapping for this VSphereVappEntity
func (tr *VSphereVappEntity) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this VSphereVappEntity
func (tr *VSphereVappEntity) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this VSphereVappEntity
func (tr *VSphereVappEntity) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this VSphereVappEntity
func (tr *VSphereVappEntity) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this VSphereVappEntity
func (tr *VSphereVappEntity) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this VSphereVappEntity
func (tr *VSphereVappEntity) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this VSphereVappEntity using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *VSphereVappEntity) LateInitialize(attrs []byte) (bool, error) {
	params := &VSphereVappEntityParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *VSphereVappEntity) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this VSphereVirtualDisk
func (mg *VSphereVirtualDisk) GetTerraformResourceType() string {
	return "vsphere_virtual_disk"
}

// GetConnectionDetailsMapping for this VSphereVirtualDisk
func (tr *VSphereVirtualDisk) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this VSphereVirtualDisk
func (tr *VSphereVirtualDisk) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this VSphereVirtualDisk
func (tr *VSphereVirtualDisk) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this VSphereVirtualDisk
func (tr *VSphereVirtualDisk) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this VSphereVirtualDisk
func (tr *VSphereVirtualDisk) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this VSphereVirtualDisk
func (tr *VSphereVirtualDisk) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this VSphereVirtualDisk using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *VSphereVirtualDisk) LateInitialize(attrs []byte) (bool, error) {
	params := &VSphereVirtualDiskParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *VSphereVirtualDisk) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this VSphereVirtualMachine
func (mg *VSphereVirtualMachine) GetTerraformResourceType() string {
	return "vsphere_virtual_machine"
}

// GetConnectionDetailsMapping for this VSphereVirtualMachine
func (tr *VSphereVirtualMachine) GetConnectionDetailsMapping() map[string]string {
	return map[string]string{"clone[*].customize[*].linux_options[*].script_text": "spec.forProvider.clone[*].customize[*].linuxOptions[*].scriptTextSecretRef", "clone[*].customize[*].windows_options[*].admin_password": "spec.forProvider.clone[*].customize[*].windowsOptions[*].adminPasswordSecretRef", "clone[*].customize[*].windows_options[*].domain_admin_password": "spec.forProvider.clone[*].customize[*].windowsOptions[*].domainAdminPasswordSecretRef", "clone[*].customize[*].windows_options[*].product_key": "spec.forProvider.clone[*].customize[*].windowsOptions[*].productKeySecretRef", "clone[*].customize[*].windows_sysprep_text": "spec.forProvider.clone[*].customize[*].windowsSysprepTextSecretRef"}
}

// GetObservation of this VSphereVirtualMachine
func (tr *VSphereVirtualMachine) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this VSphereVirtualMachine
func (tr *VSphereVirtualMachine) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this VSphereVirtualMachine
func (tr *VSphereVirtualMachine) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this VSphereVirtualMachine
func (tr *VSphereVirtualMachine) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this VSphereVirtualMachine
func (tr *VSphereVirtualMachine) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this VSphereVirtualMachine using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *VSphereVirtualMachine) LateInitialize(attrs []byte) (bool, error) {
	params := &VSphereVirtualMachineParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *VSphereVirtualMachine) GetTerraformSchemaVersion() int {
	return 3
}

// GetTerraformResourceType returns Terraform resource type for this VSphereVirtualMachineSnapshot
func (mg *VSphereVirtualMachineSnapshot) GetTerraformResourceType() string {
	return "vsphere_virtual_machine_snapshot"
}

// GetConnectionDetailsMapping for this VSphereVirtualMachineSnapshot
func (tr *VSphereVirtualMachineSnapshot) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this VSphereVirtualMachineSnapshot
func (tr *VSphereVirtualMachineSnapshot) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this VSphereVirtualMachineSnapshot
func (tr *VSphereVirtualMachineSnapshot) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this VSphereVirtualMachineSnapshot
func (tr *VSphereVirtualMachineSnapshot) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this VSphereVirtualMachineSnapshot
func (tr *VSphereVirtualMachineSnapshot) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this VSphereVirtualMachineSnapshot
func (tr *VSphereVirtualMachineSnapshot) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this VSphereVirtualMachineSnapshot using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *VSphereVirtualMachineSnapshot) LateInitialize(attrs []byte) (bool, error) {
	params := &VSphereVirtualMachineSnapshotParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *VSphereVirtualMachineSnapshot) GetTerraformSchemaVersion() int {
	return 0
}
